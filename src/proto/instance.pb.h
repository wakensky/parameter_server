// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/instance.proto

#ifndef PROTOBUF_proto_2finstance_2eproto__INCLUDED
#define PROTOBUF_proto_2finstance_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2finstance_2eproto();
void protobuf_AssignDesc_proto_2finstance_2eproto();
void protobuf_ShutdownFile_proto_2finstance_2eproto();

class FeatureGroupInfo;
class InstanceInfo;
class FeatureGroup;
class Instance;

enum InstanceInfo_LabelType {
  InstanceInfo_LabelType_EMPTY = 1,
  InstanceInfo_LabelType_BINARY = 2,
  InstanceInfo_LabelType_MULTICLASS = 3,
  InstanceInfo_LabelType_CONTINUOUS = 4
};
bool InstanceInfo_LabelType_IsValid(int value);
const InstanceInfo_LabelType InstanceInfo_LabelType_LabelType_MIN = InstanceInfo_LabelType_EMPTY;
const InstanceInfo_LabelType InstanceInfo_LabelType_LabelType_MAX = InstanceInfo_LabelType_CONTINUOUS;
const int InstanceInfo_LabelType_LabelType_ARRAYSIZE = InstanceInfo_LabelType_LabelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* InstanceInfo_LabelType_descriptor();
inline const ::std::string& InstanceInfo_LabelType_Name(InstanceInfo_LabelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    InstanceInfo_LabelType_descriptor(), value);
}
inline bool InstanceInfo_LabelType_Parse(
    const ::std::string& name, InstanceInfo_LabelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InstanceInfo_LabelType>(
    InstanceInfo_LabelType_descriptor(), name, value);
}
enum InstanceInfo_FeatureType {
  InstanceInfo_FeatureType_DENSE = 1,
  InstanceInfo_FeatureType_SPARSE = 2,
  InstanceInfo_FeatureType_SPARSE_BINARY = 3
};
bool InstanceInfo_FeatureType_IsValid(int value);
const InstanceInfo_FeatureType InstanceInfo_FeatureType_FeatureType_MIN = InstanceInfo_FeatureType_DENSE;
const InstanceInfo_FeatureType InstanceInfo_FeatureType_FeatureType_MAX = InstanceInfo_FeatureType_SPARSE_BINARY;
const int InstanceInfo_FeatureType_FeatureType_ARRAYSIZE = InstanceInfo_FeatureType_FeatureType_MAX + 1;

const ::google::protobuf::EnumDescriptor* InstanceInfo_FeatureType_descriptor();
inline const ::std::string& InstanceInfo_FeatureType_Name(InstanceInfo_FeatureType value) {
  return ::google::protobuf::internal::NameOfEnum(
    InstanceInfo_FeatureType_descriptor(), value);
}
inline bool InstanceInfo_FeatureType_Parse(
    const ::std::string& name, InstanceInfo_FeatureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InstanceInfo_FeatureType>(
    InstanceInfo_FeatureType_descriptor(), name, value);
}
// ===================================================================

class FeatureGroupInfo : public ::google::protobuf::Message {
 public:
  FeatureGroupInfo();
  virtual ~FeatureGroupInfo();

  FeatureGroupInfo(const FeatureGroupInfo& from);

  inline FeatureGroupInfo& operator=(const FeatureGroupInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureGroupInfo& default_instance();

  void Swap(FeatureGroupInfo* other);

  // implements Message ----------------------------------------------

  FeatureGroupInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureGroupInfo& from);
  void MergeFrom(const FeatureGroupInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 grp_id = 1;
  inline bool has_grp_id() const;
  inline void clear_grp_id();
  static const int kGrpIdFieldNumber = 1;
  inline ::google::protobuf::int32 grp_id() const;
  inline void set_grp_id(::google::protobuf::int32 value);

  // optional uint64 nnz_ele = 5;
  inline bool has_nnz_ele() const;
  inline void clear_nnz_ele();
  static const int kNnzEleFieldNumber = 5;
  inline ::google::protobuf::uint64 nnz_ele() const;
  inline void set_nnz_ele(::google::protobuf::uint64 value);

  // optional uint64 nnz_ins = 6;
  inline bool has_nnz_ins() const;
  inline void clear_nnz_ins();
  static const int kNnzInsFieldNumber = 6;
  inline ::google::protobuf::uint64 nnz_ins() const;
  inline void set_nnz_ins(::google::protobuf::uint64 value);

  // optional uint64 fea_begin = 3 [default = 18446744073709551615];
  inline bool has_fea_begin() const;
  inline void clear_fea_begin();
  static const int kFeaBeginFieldNumber = 3;
  inline ::google::protobuf::uint64 fea_begin() const;
  inline void set_fea_begin(::google::protobuf::uint64 value);

  // optional uint64 fea_end = 4;
  inline bool has_fea_end() const;
  inline void clear_fea_end();
  static const int kFeaEndFieldNumber = 4;
  inline ::google::protobuf::uint64 fea_end() const;
  inline void set_fea_end(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:PS.FeatureGroupInfo)
 private:
  inline void set_has_grp_id();
  inline void clear_has_grp_id();
  inline void set_has_nnz_ele();
  inline void clear_has_nnz_ele();
  inline void set_has_nnz_ins();
  inline void clear_has_nnz_ins();
  inline void set_has_fea_begin();
  inline void clear_has_fea_begin();
  inline void set_has_fea_end();
  inline void clear_has_fea_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 nnz_ele_;
  ::google::protobuf::uint64 nnz_ins_;
  ::google::protobuf::uint64 fea_begin_;
  ::google::protobuf::uint64 fea_end_;
  ::google::protobuf::int32 grp_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2finstance_2eproto();
  friend void protobuf_AssignDesc_proto_2finstance_2eproto();
  friend void protobuf_ShutdownFile_proto_2finstance_2eproto();

  void InitAsDefaultInstance();
  static FeatureGroupInfo* default_instance_;
};
// -------------------------------------------------------------------

class InstanceInfo : public ::google::protobuf::Message {
 public:
  InstanceInfo();
  virtual ~InstanceInfo();

  InstanceInfo(const InstanceInfo& from);

  inline InstanceInfo& operator=(const InstanceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstanceInfo& default_instance();

  void Swap(InstanceInfo* other);

  // implements Message ----------------------------------------------

  InstanceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstanceInfo& from);
  void MergeFrom(const InstanceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef InstanceInfo_LabelType LabelType;
  static const LabelType EMPTY = InstanceInfo_LabelType_EMPTY;
  static const LabelType BINARY = InstanceInfo_LabelType_BINARY;
  static const LabelType MULTICLASS = InstanceInfo_LabelType_MULTICLASS;
  static const LabelType CONTINUOUS = InstanceInfo_LabelType_CONTINUOUS;
  static inline bool LabelType_IsValid(int value) {
    return InstanceInfo_LabelType_IsValid(value);
  }
  static const LabelType LabelType_MIN =
    InstanceInfo_LabelType_LabelType_MIN;
  static const LabelType LabelType_MAX =
    InstanceInfo_LabelType_LabelType_MAX;
  static const int LabelType_ARRAYSIZE =
    InstanceInfo_LabelType_LabelType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LabelType_descriptor() {
    return InstanceInfo_LabelType_descriptor();
  }
  static inline const ::std::string& LabelType_Name(LabelType value) {
    return InstanceInfo_LabelType_Name(value);
  }
  static inline bool LabelType_Parse(const ::std::string& name,
      LabelType* value) {
    return InstanceInfo_LabelType_Parse(name, value);
  }

  typedef InstanceInfo_FeatureType FeatureType;
  static const FeatureType DENSE = InstanceInfo_FeatureType_DENSE;
  static const FeatureType SPARSE = InstanceInfo_FeatureType_SPARSE;
  static const FeatureType SPARSE_BINARY = InstanceInfo_FeatureType_SPARSE_BINARY;
  static inline bool FeatureType_IsValid(int value) {
    return InstanceInfo_FeatureType_IsValid(value);
  }
  static const FeatureType FeatureType_MIN =
    InstanceInfo_FeatureType_FeatureType_MIN;
  static const FeatureType FeatureType_MAX =
    InstanceInfo_FeatureType_FeatureType_MAX;
  static const int FeatureType_ARRAYSIZE =
    InstanceInfo_FeatureType_FeatureType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FeatureType_descriptor() {
    return InstanceInfo_FeatureType_descriptor();
  }
  static inline const ::std::string& FeatureType_Name(FeatureType value) {
    return InstanceInfo_FeatureType_Name(value);
  }
  static inline bool FeatureType_Parse(const ::std::string& name,
      FeatureType* value) {
    return InstanceInfo_FeatureType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PS.InstanceInfo.LabelType label_type = 1;
  inline bool has_label_type() const;
  inline void clear_label_type();
  static const int kLabelTypeFieldNumber = 1;
  inline ::PS::InstanceInfo_LabelType label_type() const;
  inline void set_label_type(::PS::InstanceInfo_LabelType value);

  // optional .PS.InstanceInfo.FeatureType fea_type = 2;
  inline bool has_fea_type() const;
  inline void clear_fea_type();
  static const int kFeaTypeFieldNumber = 2;
  inline ::PS::InstanceInfo_FeatureType fea_type() const;
  inline void set_fea_type(::PS::InstanceInfo_FeatureType value);

  // repeated .PS.FeatureGroupInfo fea_grp = 3;
  inline int fea_grp_size() const;
  inline void clear_fea_grp();
  static const int kFeaGrpFieldNumber = 3;
  inline const ::PS::FeatureGroupInfo& fea_grp(int index) const;
  inline ::PS::FeatureGroupInfo* mutable_fea_grp(int index);
  inline ::PS::FeatureGroupInfo* add_fea_grp();
  inline const ::google::protobuf::RepeatedPtrField< ::PS::FeatureGroupInfo >&
      fea_grp() const;
  inline ::google::protobuf::RepeatedPtrField< ::PS::FeatureGroupInfo >*
      mutable_fea_grp();

  // optional uint64 num_ins = 4;
  inline bool has_num_ins() const;
  inline void clear_num_ins();
  static const int kNumInsFieldNumber = 4;
  inline ::google::protobuf::uint64 num_ins() const;
  inline void set_num_ins(::google::protobuf::uint64 value);

  // optional uint64 nnz_ele = 5;
  inline bool has_nnz_ele() const;
  inline void clear_nnz_ele();
  static const int kNnzEleFieldNumber = 5;
  inline ::google::protobuf::uint64 nnz_ele() const;
  inline void set_nnz_ele(::google::protobuf::uint64 value);

  // optional uint64 fea_begin = 6 [default = 18446744073709551615];
  inline bool has_fea_begin() const;
  inline void clear_fea_begin();
  static const int kFeaBeginFieldNumber = 6;
  inline ::google::protobuf::uint64 fea_begin() const;
  inline void set_fea_begin(::google::protobuf::uint64 value);

  // optional uint64 fea_end = 7;
  inline bool has_fea_end() const;
  inline void clear_fea_end();
  static const int kFeaEndFieldNumber = 7;
  inline ::google::protobuf::uint64 fea_end() const;
  inline void set_fea_end(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:PS.InstanceInfo)
 private:
  inline void set_has_label_type();
  inline void clear_has_label_type();
  inline void set_has_fea_type();
  inline void clear_has_fea_type();
  inline void set_has_num_ins();
  inline void clear_has_num_ins();
  inline void set_has_nnz_ele();
  inline void clear_has_nnz_ele();
  inline void set_has_fea_begin();
  inline void clear_has_fea_begin();
  inline void set_has_fea_end();
  inline void clear_has_fea_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int label_type_;
  int fea_type_;
  ::google::protobuf::RepeatedPtrField< ::PS::FeatureGroupInfo > fea_grp_;
  ::google::protobuf::uint64 num_ins_;
  ::google::protobuf::uint64 nnz_ele_;
  ::google::protobuf::uint64 fea_begin_;
  ::google::protobuf::uint64 fea_end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2finstance_2eproto();
  friend void protobuf_AssignDesc_proto_2finstance_2eproto();
  friend void protobuf_ShutdownFile_proto_2finstance_2eproto();

  void InitAsDefaultInstance();
  static InstanceInfo* default_instance_;
};
// -------------------------------------------------------------------

class FeatureGroup : public ::google::protobuf::Message {
 public:
  FeatureGroup();
  virtual ~FeatureGroup();

  FeatureGroup(const FeatureGroup& from);

  inline FeatureGroup& operator=(const FeatureGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureGroup& default_instance();

  void Swap(FeatureGroup* other);

  // implements Message ----------------------------------------------

  FeatureGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureGroup& from);
  void MergeFrom(const FeatureGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 grp_id = 1;
  inline bool has_grp_id() const;
  inline void clear_grp_id();
  static const int kGrpIdFieldNumber = 1;
  inline ::google::protobuf::int32 grp_id() const;
  inline void set_grp_id(::google::protobuf::int32 value);

  // repeated uint64 fea_id = 2 [packed = true];
  inline int fea_id_size() const;
  inline void clear_fea_id();
  static const int kFeaIdFieldNumber = 2;
  inline ::google::protobuf::uint64 fea_id(int index) const;
  inline void set_fea_id(int index, ::google::protobuf::uint64 value);
  inline void add_fea_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      fea_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_fea_id();

  // repeated float fea_val = 3 [packed = true];
  inline int fea_val_size() const;
  inline void clear_fea_val();
  static const int kFeaValFieldNumber = 3;
  inline float fea_val(int index) const;
  inline void set_fea_val(int index, float value);
  inline void add_fea_val(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      fea_val() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_fea_val();

  // @@protoc_insertion_point(class_scope:PS.FeatureGroup)
 private:
  inline void set_has_grp_id();
  inline void clear_has_grp_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > fea_id_;
  mutable int _fea_id_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > fea_val_;
  mutable int _fea_val_cached_byte_size_;
  ::google::protobuf::int32 grp_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2finstance_2eproto();
  friend void protobuf_AssignDesc_proto_2finstance_2eproto();
  friend void protobuf_ShutdownFile_proto_2finstance_2eproto();

  void InitAsDefaultInstance();
  static FeatureGroup* default_instance_;
};
// -------------------------------------------------------------------

class Instance : public ::google::protobuf::Message {
 public:
  Instance();
  virtual ~Instance();

  Instance(const Instance& from);

  inline Instance& operator=(const Instance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Instance& default_instance();

  void Swap(Instance* other);

  // implements Message ----------------------------------------------

  Instance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Instance& from);
  void MergeFrom(const Instance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float label = 1;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 1;
  inline float label() const;
  inline void set_label(float value);

  // repeated .PS.FeatureGroup fea_grp = 2;
  inline int fea_grp_size() const;
  inline void clear_fea_grp();
  static const int kFeaGrpFieldNumber = 2;
  inline const ::PS::FeatureGroup& fea_grp(int index) const;
  inline ::PS::FeatureGroup* mutable_fea_grp(int index);
  inline ::PS::FeatureGroup* add_fea_grp();
  inline const ::google::protobuf::RepeatedPtrField< ::PS::FeatureGroup >&
      fea_grp() const;
  inline ::google::protobuf::RepeatedPtrField< ::PS::FeatureGroup >*
      mutable_fea_grp();

  // optional int64 ins_id = 3;
  inline bool has_ins_id() const;
  inline void clear_ins_id();
  static const int kInsIdFieldNumber = 3;
  inline ::google::protobuf::int64 ins_id() const;
  inline void set_ins_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PS.Instance)
 private:
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_ins_id();
  inline void clear_has_ins_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PS::FeatureGroup > fea_grp_;
  ::google::protobuf::int64 ins_id_;
  float label_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2finstance_2eproto();
  friend void protobuf_AssignDesc_proto_2finstance_2eproto();
  friend void protobuf_ShutdownFile_proto_2finstance_2eproto();

  void InitAsDefaultInstance();
  static Instance* default_instance_;
};
// ===================================================================


// ===================================================================

// FeatureGroupInfo

// optional int32 grp_id = 1;
inline bool FeatureGroupInfo::has_grp_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeatureGroupInfo::set_has_grp_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeatureGroupInfo::clear_has_grp_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeatureGroupInfo::clear_grp_id() {
  grp_id_ = 0;
  clear_has_grp_id();
}
inline ::google::protobuf::int32 FeatureGroupInfo::grp_id() const {
  return grp_id_;
}
inline void FeatureGroupInfo::set_grp_id(::google::protobuf::int32 value) {
  set_has_grp_id();
  grp_id_ = value;
}

// optional uint64 nnz_ele = 5;
inline bool FeatureGroupInfo::has_nnz_ele() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeatureGroupInfo::set_has_nnz_ele() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeatureGroupInfo::clear_has_nnz_ele() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeatureGroupInfo::clear_nnz_ele() {
  nnz_ele_ = GOOGLE_ULONGLONG(0);
  clear_has_nnz_ele();
}
inline ::google::protobuf::uint64 FeatureGroupInfo::nnz_ele() const {
  return nnz_ele_;
}
inline void FeatureGroupInfo::set_nnz_ele(::google::protobuf::uint64 value) {
  set_has_nnz_ele();
  nnz_ele_ = value;
}

// optional uint64 nnz_ins = 6;
inline bool FeatureGroupInfo::has_nnz_ins() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeatureGroupInfo::set_has_nnz_ins() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeatureGroupInfo::clear_has_nnz_ins() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeatureGroupInfo::clear_nnz_ins() {
  nnz_ins_ = GOOGLE_ULONGLONG(0);
  clear_has_nnz_ins();
}
inline ::google::protobuf::uint64 FeatureGroupInfo::nnz_ins() const {
  return nnz_ins_;
}
inline void FeatureGroupInfo::set_nnz_ins(::google::protobuf::uint64 value) {
  set_has_nnz_ins();
  nnz_ins_ = value;
}

// optional uint64 fea_begin = 3 [default = 18446744073709551615];
inline bool FeatureGroupInfo::has_fea_begin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FeatureGroupInfo::set_has_fea_begin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FeatureGroupInfo::clear_has_fea_begin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FeatureGroupInfo::clear_fea_begin() {
  fea_begin_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_fea_begin();
}
inline ::google::protobuf::uint64 FeatureGroupInfo::fea_begin() const {
  return fea_begin_;
}
inline void FeatureGroupInfo::set_fea_begin(::google::protobuf::uint64 value) {
  set_has_fea_begin();
  fea_begin_ = value;
}

// optional uint64 fea_end = 4;
inline bool FeatureGroupInfo::has_fea_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FeatureGroupInfo::set_has_fea_end() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FeatureGroupInfo::clear_has_fea_end() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FeatureGroupInfo::clear_fea_end() {
  fea_end_ = GOOGLE_ULONGLONG(0);
  clear_has_fea_end();
}
inline ::google::protobuf::uint64 FeatureGroupInfo::fea_end() const {
  return fea_end_;
}
inline void FeatureGroupInfo::set_fea_end(::google::protobuf::uint64 value) {
  set_has_fea_end();
  fea_end_ = value;
}

// -------------------------------------------------------------------

// InstanceInfo

// optional .PS.InstanceInfo.LabelType label_type = 1;
inline bool InstanceInfo::has_label_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstanceInfo::set_has_label_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstanceInfo::clear_has_label_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstanceInfo::clear_label_type() {
  label_type_ = 1;
  clear_has_label_type();
}
inline ::PS::InstanceInfo_LabelType InstanceInfo::label_type() const {
  return static_cast< ::PS::InstanceInfo_LabelType >(label_type_);
}
inline void InstanceInfo::set_label_type(::PS::InstanceInfo_LabelType value) {
  assert(::PS::InstanceInfo_LabelType_IsValid(value));
  set_has_label_type();
  label_type_ = value;
}

// optional .PS.InstanceInfo.FeatureType fea_type = 2;
inline bool InstanceInfo::has_fea_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstanceInfo::set_has_fea_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InstanceInfo::clear_has_fea_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InstanceInfo::clear_fea_type() {
  fea_type_ = 1;
  clear_has_fea_type();
}
inline ::PS::InstanceInfo_FeatureType InstanceInfo::fea_type() const {
  return static_cast< ::PS::InstanceInfo_FeatureType >(fea_type_);
}
inline void InstanceInfo::set_fea_type(::PS::InstanceInfo_FeatureType value) {
  assert(::PS::InstanceInfo_FeatureType_IsValid(value));
  set_has_fea_type();
  fea_type_ = value;
}

// repeated .PS.FeatureGroupInfo fea_grp = 3;
inline int InstanceInfo::fea_grp_size() const {
  return fea_grp_.size();
}
inline void InstanceInfo::clear_fea_grp() {
  fea_grp_.Clear();
}
inline const ::PS::FeatureGroupInfo& InstanceInfo::fea_grp(int index) const {
  return fea_grp_.Get(index);
}
inline ::PS::FeatureGroupInfo* InstanceInfo::mutable_fea_grp(int index) {
  return fea_grp_.Mutable(index);
}
inline ::PS::FeatureGroupInfo* InstanceInfo::add_fea_grp() {
  return fea_grp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PS::FeatureGroupInfo >&
InstanceInfo::fea_grp() const {
  return fea_grp_;
}
inline ::google::protobuf::RepeatedPtrField< ::PS::FeatureGroupInfo >*
InstanceInfo::mutable_fea_grp() {
  return &fea_grp_;
}

// optional uint64 num_ins = 4;
inline bool InstanceInfo::has_num_ins() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InstanceInfo::set_has_num_ins() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InstanceInfo::clear_has_num_ins() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InstanceInfo::clear_num_ins() {
  num_ins_ = GOOGLE_ULONGLONG(0);
  clear_has_num_ins();
}
inline ::google::protobuf::uint64 InstanceInfo::num_ins() const {
  return num_ins_;
}
inline void InstanceInfo::set_num_ins(::google::protobuf::uint64 value) {
  set_has_num_ins();
  num_ins_ = value;
}

// optional uint64 nnz_ele = 5;
inline bool InstanceInfo::has_nnz_ele() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InstanceInfo::set_has_nnz_ele() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InstanceInfo::clear_has_nnz_ele() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InstanceInfo::clear_nnz_ele() {
  nnz_ele_ = GOOGLE_ULONGLONG(0);
  clear_has_nnz_ele();
}
inline ::google::protobuf::uint64 InstanceInfo::nnz_ele() const {
  return nnz_ele_;
}
inline void InstanceInfo::set_nnz_ele(::google::protobuf::uint64 value) {
  set_has_nnz_ele();
  nnz_ele_ = value;
}

// optional uint64 fea_begin = 6 [default = 18446744073709551615];
inline bool InstanceInfo::has_fea_begin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InstanceInfo::set_has_fea_begin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InstanceInfo::clear_has_fea_begin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InstanceInfo::clear_fea_begin() {
  fea_begin_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_fea_begin();
}
inline ::google::protobuf::uint64 InstanceInfo::fea_begin() const {
  return fea_begin_;
}
inline void InstanceInfo::set_fea_begin(::google::protobuf::uint64 value) {
  set_has_fea_begin();
  fea_begin_ = value;
}

// optional uint64 fea_end = 7;
inline bool InstanceInfo::has_fea_end() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InstanceInfo::set_has_fea_end() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InstanceInfo::clear_has_fea_end() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InstanceInfo::clear_fea_end() {
  fea_end_ = GOOGLE_ULONGLONG(0);
  clear_has_fea_end();
}
inline ::google::protobuf::uint64 InstanceInfo::fea_end() const {
  return fea_end_;
}
inline void InstanceInfo::set_fea_end(::google::protobuf::uint64 value) {
  set_has_fea_end();
  fea_end_ = value;
}

// -------------------------------------------------------------------

// FeatureGroup

// optional int32 grp_id = 1;
inline bool FeatureGroup::has_grp_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeatureGroup::set_has_grp_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeatureGroup::clear_has_grp_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeatureGroup::clear_grp_id() {
  grp_id_ = 0;
  clear_has_grp_id();
}
inline ::google::protobuf::int32 FeatureGroup::grp_id() const {
  return grp_id_;
}
inline void FeatureGroup::set_grp_id(::google::protobuf::int32 value) {
  set_has_grp_id();
  grp_id_ = value;
}

// repeated uint64 fea_id = 2 [packed = true];
inline int FeatureGroup::fea_id_size() const {
  return fea_id_.size();
}
inline void FeatureGroup::clear_fea_id() {
  fea_id_.Clear();
}
inline ::google::protobuf::uint64 FeatureGroup::fea_id(int index) const {
  return fea_id_.Get(index);
}
inline void FeatureGroup::set_fea_id(int index, ::google::protobuf::uint64 value) {
  fea_id_.Set(index, value);
}
inline void FeatureGroup::add_fea_id(::google::protobuf::uint64 value) {
  fea_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
FeatureGroup::fea_id() const {
  return fea_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
FeatureGroup::mutable_fea_id() {
  return &fea_id_;
}

// repeated float fea_val = 3 [packed = true];
inline int FeatureGroup::fea_val_size() const {
  return fea_val_.size();
}
inline void FeatureGroup::clear_fea_val() {
  fea_val_.Clear();
}
inline float FeatureGroup::fea_val(int index) const {
  return fea_val_.Get(index);
}
inline void FeatureGroup::set_fea_val(int index, float value) {
  fea_val_.Set(index, value);
}
inline void FeatureGroup::add_fea_val(float value) {
  fea_val_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
FeatureGroup::fea_val() const {
  return fea_val_;
}
inline ::google::protobuf::RepeatedField< float >*
FeatureGroup::mutable_fea_val() {
  return &fea_val_;
}

// -------------------------------------------------------------------

// Instance

// optional float label = 1;
inline bool Instance::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Instance::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Instance::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Instance::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline float Instance::label() const {
  return label_;
}
inline void Instance::set_label(float value) {
  set_has_label();
  label_ = value;
}

// repeated .PS.FeatureGroup fea_grp = 2;
inline int Instance::fea_grp_size() const {
  return fea_grp_.size();
}
inline void Instance::clear_fea_grp() {
  fea_grp_.Clear();
}
inline const ::PS::FeatureGroup& Instance::fea_grp(int index) const {
  return fea_grp_.Get(index);
}
inline ::PS::FeatureGroup* Instance::mutable_fea_grp(int index) {
  return fea_grp_.Mutable(index);
}
inline ::PS::FeatureGroup* Instance::add_fea_grp() {
  return fea_grp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PS::FeatureGroup >&
Instance::fea_grp() const {
  return fea_grp_;
}
inline ::google::protobuf::RepeatedPtrField< ::PS::FeatureGroup >*
Instance::mutable_fea_grp() {
  return &fea_grp_;
}

// optional int64 ins_id = 3;
inline bool Instance::has_ins_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Instance::set_has_ins_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Instance::clear_has_ins_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Instance::clear_ins_id() {
  ins_id_ = GOOGLE_LONGLONG(0);
  clear_has_ins_id();
}
inline ::google::protobuf::int64 Instance::ins_id() const {
  return ins_id_;
}
inline void Instance::set_ins_id(::google::protobuf::int64 value) {
  set_has_ins_id();
  ins_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::InstanceInfo_LabelType>() {
  return ::PS::InstanceInfo_LabelType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::InstanceInfo_FeatureType>() {
  return ::PS::InstanceInfo_FeatureType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2finstance_2eproto__INCLUDED
