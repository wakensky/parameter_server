package PS;
import "proto/node.proto";
import "proto/range.proto";
import "proto/app.proto";
import "proto/risk_minimization.proto";

message Task {
  enum Type {
    TERMINATE = 1;
    TERMINATE_CONFIRM = 2;
    REPLY = 3;
    MANAGE = 4;
    CALL_CUSTOMER = 5;
    HEARTBEATING = 6;
  }
  required Type type = 1;

  // request or reply message
  required bool request = 2 [default = false];
  // customer name
  required string customer = 3;

  optional int32 time = 4;
  optional int32 wait_time = 5 [default = -1];
  // optional string wait_group = 6;

  // the higher the more important,
  optional int32 priority = 6 [default = 0];

  // if or not there is the key list
  optional bool has_key = 7 [default = false];
  optional PbRange key_range = 8;
  optional uint32 key_signature = 9;

  // set values if data are compressed, empty means data are not compressed
  repeated uint64 uncompressed_size = 10;
  // optional bool is_compressed = 8 [default = false];

  // general task
  optional bytes msg = 101;
  optional ManageNode mng_node = 102;
  optional ManageApp mng_app = 103;

  // parameters
  optional CallSharedPara shared_para = 201;

  // applications
  optional RiskMinCall risk = 301;
  optional CallSketch sketch = 302;

  optional bool need_push_pull = 401 [default = true];
}

message ManageNode {
  enum Command {
    INIT = 1;
    REPLACE = 2;
    REMOVE = 3;
  }

  required Command cmd = 1;
  repeated Node nodes = 2;
}

message ManageApp {
  enum Command {
    ADD = 1;
    REMOVE = 2;
  }
  required Command cmd = 1;
  required AppConfig app_config = 2;
}

message Timestamp {
  required string sender = 1;
  required int32 time = 2;
}

message CallSharedPara {
  enum Command {
    PUSH = 1;
    PULL = 2;
    PUSH_REPLICA = 3;
    PULL_REPLICA = 4;
  }

  required Command cmd = 1;
  // required PbRange key = 5;

  optional bool add_key = 2;
  optional bool add_key_count = 3;
  optional int32 key_freq = 4;

  repeated Timestamp backup = 6;

  // repeated int32 vec = 7;
}

message CallSketch {
  enum Command {
    PREPARE_DATA = 1;
    INSERT_DATA = 2;
    EVAL_PROGRESS = 3;
    QUERY_DATA = 4;
    RECOVER = 5;
  }
  required Command cmd = 1;
  optional PbRange key = 2;
}

message SketchResponse {
  optional string nodeid = 1;
  optional double process_time = 2;
  optional uint32 payload = 3;
  optional uint32 key = 4;
}

// running status back to scheduler
message RunningStatusReport {
  optional int32 task_id = 1 [default = 0];
  optional uint32 seconds_since_epoch = 10;

  // time spans from task beginning to task ending (in microseconds)
  optional uint32 total_time_micro = 3;
  // time spent on calculation (in microseconds)
  optional uint32 busy_time_micro = 2;
  // time spent on network (waiting other nodes)
  optional uint32 netin_time_micro = 9;
  optional uint32 netout_time_micro = 13;

  // netin / netout Bytes
  optional uint32 in_bytes = 14;
  optional uint32 out_bytes = 15;

  // process's cpu usage in user state (percent)
  optional float my_cpu_usage_user = 4;
  // process's cpu usage in sys state (percent)
  optional float my_cpu_usage_sys = 11;
  // host's cpu usage in user state (percent)
  optional float host_cpu_usage_user = 5;
  // host's cpu usage in sys state (percent)
  optional float host_cpu_usage_sys = 12;

  // process's memory usage; virtual and rss in Mega Bytes
  optional uint32 my_virtual = 6;
  optional uint32 my_rss = 7;
  // host's free memory in Mega Bytes
  optional uint32 host_free_memory = 8;

  // host's in/out bandwidth usage (MB/s)
  optional uint32 host_net_in_bw_usage = 16;
  optional uint32 host_net_out_bw_usage = 17;
}
