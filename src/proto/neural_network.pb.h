// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/neural_network.proto

#ifndef PROTOBUF_proto_2fneural_5fnetwork_2eproto__INCLUDED
#define PROTOBUF_proto_2fneural_5fnetwork_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/config.pb.h"
// @@protoc_insertion_point(includes)

namespace PS {
namespace NN {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fneural_5fnetwork_2eproto();
void protobuf_AssignDesc_proto_2fneural_5fnetwork_2eproto();
void protobuf_ShutdownFile_proto_2fneural_5fnetwork_2eproto();

class Config;
class LayerConfig;
class NetConfig;
class ActivationConfig;
class SolverConfig;

enum LayerConfig_Type {
  LayerConfig_Type_NONE = 0,
  LayerConfig_Type_DATA = 2,
  LayerConfig_Type_FULLY_CONNECTED = 1,
  LayerConfig_Type_LOGISTIC_LOSS = 3,
  LayerConfig_Type_AUC = 4
};
bool LayerConfig_Type_IsValid(int value);
const LayerConfig_Type LayerConfig_Type_Type_MIN = LayerConfig_Type_NONE;
const LayerConfig_Type LayerConfig_Type_Type_MAX = LayerConfig_Type_AUC;
const int LayerConfig_Type_Type_ARRAYSIZE = LayerConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LayerConfig_Type_descriptor();
inline const ::std::string& LayerConfig_Type_Name(LayerConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LayerConfig_Type_descriptor(), value);
}
inline bool LayerConfig_Type_Parse(
    const ::std::string& name, LayerConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LayerConfig_Type>(
    LayerConfig_Type_descriptor(), name, value);
}
enum ActivationConfig_Type {
  ActivationConfig_Type_IDENTITY = 0,
  ActivationConfig_Type_SIGMOID = 1,
  ActivationConfig_Type_LOGISTIC = 2,
  ActivationConfig_Type_SOFTMAX = 3,
  ActivationConfig_Type_RELU = 4,
  ActivationConfig_Type_SCALED_TANH = 5
};
bool ActivationConfig_Type_IsValid(int value);
const ActivationConfig_Type ActivationConfig_Type_Type_MIN = ActivationConfig_Type_IDENTITY;
const ActivationConfig_Type ActivationConfig_Type_Type_MAX = ActivationConfig_Type_SCALED_TANH;
const int ActivationConfig_Type_Type_ARRAYSIZE = ActivationConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActivationConfig_Type_descriptor();
inline const ::std::string& ActivationConfig_Type_Name(ActivationConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActivationConfig_Type_descriptor(), value);
}
inline bool ActivationConfig_Type_Parse(
    const ::std::string& name, ActivationConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActivationConfig_Type>(
    ActivationConfig_Type_descriptor(), name, value);
}
enum SolverConfig_Type {
  SolverConfig_Type_SGD = 1
};
bool SolverConfig_Type_IsValid(int value);
const SolverConfig_Type SolverConfig_Type_Type_MIN = SolverConfig_Type_SGD;
const SolverConfig_Type SolverConfig_Type_Type_MAX = SolverConfig_Type_SGD;
const int SolverConfig_Type_Type_ARRAYSIZE = SolverConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverConfig_Type_descriptor();
inline const ::std::string& SolverConfig_Type_Name(SolverConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverConfig_Type_descriptor(), value);
}
inline bool SolverConfig_Type_Parse(
    const ::std::string& name, SolverConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverConfig_Type>(
    SolverConfig_Type_descriptor(), name, value);
}
enum SolverConfig_Update {
  SolverConfig_Update_NORMAL = 1,
  SolverConfig_Update_ADAGRAD = 2
};
bool SolverConfig_Update_IsValid(int value);
const SolverConfig_Update SolverConfig_Update_Update_MIN = SolverConfig_Update_NORMAL;
const SolverConfig_Update SolverConfig_Update_Update_MAX = SolverConfig_Update_ADAGRAD;
const int SolverConfig_Update_Update_ARRAYSIZE = SolverConfig_Update_Update_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverConfig_Update_descriptor();
inline const ::std::string& SolverConfig_Update_Name(SolverConfig_Update value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverConfig_Update_descriptor(), value);
}
inline bool SolverConfig_Update_Parse(
    const ::std::string& name, SolverConfig_Update* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverConfig_Update>(
    SolverConfig_Update_descriptor(), name, value);
}
// ===================================================================

class Config : public ::google::protobuf::Message {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  void Swap(Config* other);

  // implements Message ----------------------------------------------

  Config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PS.NN.NetConfig train = 30;
  inline bool has_train() const;
  inline void clear_train();
  static const int kTrainFieldNumber = 30;
  inline const ::PS::NN::NetConfig& train() const;
  inline ::PS::NN::NetConfig* mutable_train();
  inline ::PS::NN::NetConfig* release_train();
  inline void set_allocated_train(::PS::NN::NetConfig* train);

  // optional .PS.NN.NetConfig test = 31;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 31;
  inline const ::PS::NN::NetConfig& test() const;
  inline ::PS::NN::NetConfig* mutable_test();
  inline ::PS::NN::NetConfig* release_test();
  inline void set_allocated_test(::PS::NN::NetConfig* test);

  // optional .PS.NN.SolverConfig solver = 32;
  inline bool has_solver() const;
  inline void clear_solver();
  static const int kSolverFieldNumber = 32;
  inline const ::PS::NN::SolverConfig& solver() const;
  inline ::PS::NN::SolverConfig* mutable_solver();
  inline ::PS::NN::SolverConfig* release_solver();
  inline void set_allocated_solver(::PS::NN::SolverConfig* solver);

  // @@protoc_insertion_point(class_scope:PS.NN.Config)
 private:
  inline void set_has_train();
  inline void clear_has_train();
  inline void set_has_test();
  inline void clear_has_test();
  inline void set_has_solver();
  inline void clear_has_solver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PS::NN::NetConfig* train_;
  ::PS::NN::NetConfig* test_;
  ::PS::NN::SolverConfig* solver_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fneural_5fnetwork_2eproto();
  friend void protobuf_AssignDesc_proto_2fneural_5fnetwork_2eproto();
  friend void protobuf_ShutdownFile_proto_2fneural_5fnetwork_2eproto();

  void InitAsDefaultInstance();
  static Config* default_instance_;
};
// -------------------------------------------------------------------

class LayerConfig : public ::google::protobuf::Message {
 public:
  LayerConfig();
  virtual ~LayerConfig();

  LayerConfig(const LayerConfig& from);

  inline LayerConfig& operator=(const LayerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerConfig& default_instance();

  void Swap(LayerConfig* other);

  // implements Message ----------------------------------------------

  LayerConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerConfig& from);
  void MergeFrom(const LayerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LayerConfig_Type Type;
  static const Type NONE = LayerConfig_Type_NONE;
  static const Type DATA = LayerConfig_Type_DATA;
  static const Type FULLY_CONNECTED = LayerConfig_Type_FULLY_CONNECTED;
  static const Type LOGISTIC_LOSS = LayerConfig_Type_LOGISTIC_LOSS;
  static const Type AUC = LayerConfig_Type_AUC;
  static inline bool Type_IsValid(int value) {
    return LayerConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LayerConfig_Type_Type_MIN;
  static const Type Type_MAX =
    LayerConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LayerConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LayerConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LayerConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LayerConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PS.NN.LayerConfig.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PS::NN::LayerConfig_Type type() const;
  inline void set_type(::PS::NN::LayerConfig_Type value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string in = 3;
  inline int in_size() const;
  inline void clear_in();
  static const int kInFieldNumber = 3;
  inline const ::std::string& in(int index) const;
  inline ::std::string* mutable_in(int index);
  inline void set_in(int index, const ::std::string& value);
  inline void set_in(int index, const char* value);
  inline void set_in(int index, const char* value, size_t size);
  inline ::std::string* add_in();
  inline void add_in(const ::std::string& value);
  inline void add_in(const char* value);
  inline void add_in(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& in() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_in();

  // repeated string out = 4;
  inline int out_size() const;
  inline void clear_out();
  static const int kOutFieldNumber = 4;
  inline const ::std::string& out(int index) const;
  inline ::std::string* mutable_out(int index);
  inline void set_out(int index, const ::std::string& value);
  inline void set_out(int index, const char* value);
  inline void set_out(int index, const char* value, size_t size);
  inline ::std::string* add_out();
  inline void add_out(const ::std::string& value);
  inline void add_out(const char* value);
  inline void add_out(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& out() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_out();

  // optional uint32 size = 7;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 7;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);

  // optional .PS.NN.ActivationConfig activation = 5;
  inline bool has_activation() const;
  inline void clear_activation();
  static const int kActivationFieldNumber = 5;
  inline const ::PS::NN::ActivationConfig& activation() const;
  inline ::PS::NN::ActivationConfig* mutable_activation();
  inline ::PS::NN::ActivationConfig* release_activation();
  inline void set_allocated_activation(::PS::NN::ActivationConfig* activation);

  // optional int32 minibatch_size = 8 [default = 0];
  inline bool has_minibatch_size() const;
  inline void clear_minibatch_size();
  static const int kMinibatchSizeFieldNumber = 8;
  inline ::google::protobuf::int32 minibatch_size() const;
  inline void set_minibatch_size(::google::protobuf::int32 value);

  // optional double lr_scale = 6 [default = 1];
  inline bool has_lr_scale() const;
  inline void clear_lr_scale();
  static const int kLrScaleFieldNumber = 6;
  inline double lr_scale() const;
  inline void set_lr_scale(double value);

  // optional .PS.DataConfig data = 11;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 11;
  inline const ::PS::DataConfig& data() const;
  inline ::PS::DataConfig* mutable_data();
  inline ::PS::DataConfig* release_data();
  inline void set_allocated_data(::PS::DataConfig* data);

  // optional .PS.ParameterInitConfig init = 12;
  inline bool has_init() const;
  inline void clear_init();
  static const int kInitFieldNumber = 12;
  inline const ::PS::ParameterInitConfig& init() const;
  inline ::PS::ParameterInitConfig* mutable_init();
  inline ::PS::ParameterInitConfig* release_init();
  inline void set_allocated_init(::PS::ParameterInitConfig* init);

  // @@protoc_insertion_point(class_scope:PS.NN.LayerConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_activation();
  inline void clear_has_activation();
  inline void set_has_minibatch_size();
  inline void clear_has_minibatch_size();
  inline void set_has_lr_scale();
  inline void clear_has_lr_scale();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_init();
  inline void clear_has_init();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> in_;
  int type_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> out_;
  ::PS::NN::ActivationConfig* activation_;
  double lr_scale_;
  ::PS::DataConfig* data_;
  ::PS::ParameterInitConfig* init_;
  ::google::protobuf::int32 minibatch_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fneural_5fnetwork_2eproto();
  friend void protobuf_AssignDesc_proto_2fneural_5fnetwork_2eproto();
  friend void protobuf_ShutdownFile_proto_2fneural_5fnetwork_2eproto();

  void InitAsDefaultInstance();
  static LayerConfig* default_instance_;
};
// -------------------------------------------------------------------

class NetConfig : public ::google::protobuf::Message {
 public:
  NetConfig();
  virtual ~NetConfig();

  NetConfig(const NetConfig& from);

  inline NetConfig& operator=(const NetConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetConfig& default_instance();

  void Swap(NetConfig* other);

  // implements Message ----------------------------------------------

  NetConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetConfig& from);
  void MergeFrom(const NetConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .PS.NN.LayerConfig layer = 2;
  inline int layer_size() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 2;
  inline const ::PS::NN::LayerConfig& layer(int index) const;
  inline ::PS::NN::LayerConfig* mutable_layer(int index);
  inline ::PS::NN::LayerConfig* add_layer();
  inline const ::google::protobuf::RepeatedPtrField< ::PS::NN::LayerConfig >&
      layer() const;
  inline ::google::protobuf::RepeatedPtrField< ::PS::NN::LayerConfig >*
      mutable_layer();

  // @@protoc_insertion_point(class_scope:PS.NN.NetConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::PS::NN::LayerConfig > layer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fneural_5fnetwork_2eproto();
  friend void protobuf_AssignDesc_proto_2fneural_5fnetwork_2eproto();
  friend void protobuf_ShutdownFile_proto_2fneural_5fnetwork_2eproto();

  void InitAsDefaultInstance();
  static NetConfig* default_instance_;
};
// -------------------------------------------------------------------

class ActivationConfig : public ::google::protobuf::Message {
 public:
  ActivationConfig();
  virtual ~ActivationConfig();

  ActivationConfig(const ActivationConfig& from);

  inline ActivationConfig& operator=(const ActivationConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivationConfig& default_instance();

  void Swap(ActivationConfig* other);

  // implements Message ----------------------------------------------

  ActivationConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivationConfig& from);
  void MergeFrom(const ActivationConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ActivationConfig_Type Type;
  static const Type IDENTITY = ActivationConfig_Type_IDENTITY;
  static const Type SIGMOID = ActivationConfig_Type_SIGMOID;
  static const Type LOGISTIC = ActivationConfig_Type_LOGISTIC;
  static const Type SOFTMAX = ActivationConfig_Type_SOFTMAX;
  static const Type RELU = ActivationConfig_Type_RELU;
  static const Type SCALED_TANH = ActivationConfig_Type_SCALED_TANH;
  static inline bool Type_IsValid(int value) {
    return ActivationConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ActivationConfig_Type_Type_MIN;
  static const Type Type_MAX =
    ActivationConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ActivationConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ActivationConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ActivationConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ActivationConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PS.NN.ActivationConfig.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PS::NN::ActivationConfig_Type type() const;
  inline void set_type(::PS::NN::ActivationConfig_Type value);

  // @@protoc_insertion_point(class_scope:PS.NN.ActivationConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fneural_5fnetwork_2eproto();
  friend void protobuf_AssignDesc_proto_2fneural_5fnetwork_2eproto();
  friend void protobuf_ShutdownFile_proto_2fneural_5fnetwork_2eproto();

  void InitAsDefaultInstance();
  static ActivationConfig* default_instance_;
};
// -------------------------------------------------------------------

class SolverConfig : public ::google::protobuf::Message {
 public:
  SolverConfig();
  virtual ~SolverConfig();

  SolverConfig(const SolverConfig& from);

  inline SolverConfig& operator=(const SolverConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverConfig& default_instance();

  void Swap(SolverConfig* other);

  // implements Message ----------------------------------------------

  SolverConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverConfig& from);
  void MergeFrom(const SolverConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SolverConfig_Type Type;
  static const Type SGD = SolverConfig_Type_SGD;
  static inline bool Type_IsValid(int value) {
    return SolverConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    SolverConfig_Type_Type_MIN;
  static const Type Type_MAX =
    SolverConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    SolverConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return SolverConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return SolverConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return SolverConfig_Type_Parse(name, value);
  }

  typedef SolverConfig_Update Update;
  static const Update NORMAL = SolverConfig_Update_NORMAL;
  static const Update ADAGRAD = SolverConfig_Update_ADAGRAD;
  static inline bool Update_IsValid(int value) {
    return SolverConfig_Update_IsValid(value);
  }
  static const Update Update_MIN =
    SolverConfig_Update_Update_MIN;
  static const Update Update_MAX =
    SolverConfig_Update_Update_MAX;
  static const int Update_ARRAYSIZE =
    SolverConfig_Update_Update_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Update_descriptor() {
    return SolverConfig_Update_descriptor();
  }
  static inline const ::std::string& Update_Name(Update value) {
    return SolverConfig_Update_Name(value);
  }
  static inline bool Update_Parse(const ::std::string& name,
      Update* value) {
    return SolverConfig_Update_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PS.NN.SolverConfig.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PS::NN::SolverConfig_Type type() const;
  inline void set_type(::PS::NN::SolverConfig_Type value);

  // optional .PS.NN.SolverConfig.Update update = 6;
  inline bool has_update() const;
  inline void clear_update();
  static const int kUpdateFieldNumber = 6;
  inline ::PS::NN::SolverConfig_Update update() const;
  inline void set_update(::PS::NN::SolverConfig_Update value);

  // optional .PS.LearningRateConfig lr = 2;
  inline bool has_lr() const;
  inline void clear_lr();
  static const int kLrFieldNumber = 2;
  inline const ::PS::LearningRateConfig& lr() const;
  inline ::PS::LearningRateConfig* mutable_lr();
  inline ::PS::LearningRateConfig* release_lr();
  inline void set_allocated_lr(::PS::LearningRateConfig* lr);

  // optional int32 max_iteration = 3 [default = 1000];
  inline bool has_max_iteration() const;
  inline void clear_max_iteration();
  static const int kMaxIterationFieldNumber = 3;
  inline ::google::protobuf::int32 max_iteration() const;
  inline void set_max_iteration(::google::protobuf::int32 value);

  // optional int32 display = 4 [default = 100];
  inline bool has_display() const;
  inline void clear_display();
  static const int kDisplayFieldNumber = 4;
  inline ::google::protobuf::int32 display() const;
  inline void set_display(::google::protobuf::int32 value);

  // optional int32 validation = 5 [default = 100];
  inline bool has_validation() const;
  inline void clear_validation();
  static const int kValidationFieldNumber = 5;
  inline ::google::protobuf::int32 validation() const;
  inline void set_validation(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PS.NN.SolverConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_update();
  inline void clear_has_update();
  inline void set_has_lr();
  inline void clear_has_lr();
  inline void set_has_max_iteration();
  inline void clear_has_max_iteration();
  inline void set_has_display();
  inline void clear_has_display();
  inline void set_has_validation();
  inline void clear_has_validation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int update_;
  ::PS::LearningRateConfig* lr_;
  ::google::protobuf::int32 max_iteration_;
  ::google::protobuf::int32 display_;
  ::google::protobuf::int32 validation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fneural_5fnetwork_2eproto();
  friend void protobuf_AssignDesc_proto_2fneural_5fnetwork_2eproto();
  friend void protobuf_ShutdownFile_proto_2fneural_5fnetwork_2eproto();

  void InitAsDefaultInstance();
  static SolverConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// Config

// optional .PS.NN.NetConfig train = 30;
inline bool Config::has_train() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::set_has_train() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config::clear_has_train() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config::clear_train() {
  if (train_ != NULL) train_->::PS::NN::NetConfig::Clear();
  clear_has_train();
}
inline const ::PS::NN::NetConfig& Config::train() const {
  return train_ != NULL ? *train_ : *default_instance_->train_;
}
inline ::PS::NN::NetConfig* Config::mutable_train() {
  set_has_train();
  if (train_ == NULL) train_ = new ::PS::NN::NetConfig;
  return train_;
}
inline ::PS::NN::NetConfig* Config::release_train() {
  clear_has_train();
  ::PS::NN::NetConfig* temp = train_;
  train_ = NULL;
  return temp;
}
inline void Config::set_allocated_train(::PS::NN::NetConfig* train) {
  delete train_;
  train_ = train;
  if (train) {
    set_has_train();
  } else {
    clear_has_train();
  }
}

// optional .PS.NN.NetConfig test = 31;
inline bool Config::has_test() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::set_has_test() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config::clear_has_test() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config::clear_test() {
  if (test_ != NULL) test_->::PS::NN::NetConfig::Clear();
  clear_has_test();
}
inline const ::PS::NN::NetConfig& Config::test() const {
  return test_ != NULL ? *test_ : *default_instance_->test_;
}
inline ::PS::NN::NetConfig* Config::mutable_test() {
  set_has_test();
  if (test_ == NULL) test_ = new ::PS::NN::NetConfig;
  return test_;
}
inline ::PS::NN::NetConfig* Config::release_test() {
  clear_has_test();
  ::PS::NN::NetConfig* temp = test_;
  test_ = NULL;
  return temp;
}
inline void Config::set_allocated_test(::PS::NN::NetConfig* test) {
  delete test_;
  test_ = test;
  if (test) {
    set_has_test();
  } else {
    clear_has_test();
  }
}

// optional .PS.NN.SolverConfig solver = 32;
inline bool Config::has_solver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Config::set_has_solver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Config::clear_has_solver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Config::clear_solver() {
  if (solver_ != NULL) solver_->::PS::NN::SolverConfig::Clear();
  clear_has_solver();
}
inline const ::PS::NN::SolverConfig& Config::solver() const {
  return solver_ != NULL ? *solver_ : *default_instance_->solver_;
}
inline ::PS::NN::SolverConfig* Config::mutable_solver() {
  set_has_solver();
  if (solver_ == NULL) solver_ = new ::PS::NN::SolverConfig;
  return solver_;
}
inline ::PS::NN::SolverConfig* Config::release_solver() {
  clear_has_solver();
  ::PS::NN::SolverConfig* temp = solver_;
  solver_ = NULL;
  return temp;
}
inline void Config::set_allocated_solver(::PS::NN::SolverConfig* solver) {
  delete solver_;
  solver_ = solver;
  if (solver) {
    set_has_solver();
  } else {
    clear_has_solver();
  }
}

// -------------------------------------------------------------------

// LayerConfig

// required .PS.NN.LayerConfig.Type type = 1;
inline bool LayerConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::PS::NN::LayerConfig_Type LayerConfig::type() const {
  return static_cast< ::PS::NN::LayerConfig_Type >(type_);
}
inline void LayerConfig::set_type(::PS::NN::LayerConfig_Type value) {
  assert(::PS::NN::LayerConfig_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string name = 2;
inline bool LayerConfig::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerConfig::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LayerConfig::name() const {
  return *name_;
}
inline void LayerConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LayerConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LayerConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LayerConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LayerConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LayerConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string in = 3;
inline int LayerConfig::in_size() const {
  return in_.size();
}
inline void LayerConfig::clear_in() {
  in_.Clear();
}
inline const ::std::string& LayerConfig::in(int index) const {
  return in_.Get(index);
}
inline ::std::string* LayerConfig::mutable_in(int index) {
  return in_.Mutable(index);
}
inline void LayerConfig::set_in(int index, const ::std::string& value) {
  in_.Mutable(index)->assign(value);
}
inline void LayerConfig::set_in(int index, const char* value) {
  in_.Mutable(index)->assign(value);
}
inline void LayerConfig::set_in(int index, const char* value, size_t size) {
  in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LayerConfig::add_in() {
  return in_.Add();
}
inline void LayerConfig::add_in(const ::std::string& value) {
  in_.Add()->assign(value);
}
inline void LayerConfig::add_in(const char* value) {
  in_.Add()->assign(value);
}
inline void LayerConfig::add_in(const char* value, size_t size) {
  in_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerConfig::in() const {
  return in_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerConfig::mutable_in() {
  return &in_;
}

// repeated string out = 4;
inline int LayerConfig::out_size() const {
  return out_.size();
}
inline void LayerConfig::clear_out() {
  out_.Clear();
}
inline const ::std::string& LayerConfig::out(int index) const {
  return out_.Get(index);
}
inline ::std::string* LayerConfig::mutable_out(int index) {
  return out_.Mutable(index);
}
inline void LayerConfig::set_out(int index, const ::std::string& value) {
  out_.Mutable(index)->assign(value);
}
inline void LayerConfig::set_out(int index, const char* value) {
  out_.Mutable(index)->assign(value);
}
inline void LayerConfig::set_out(int index, const char* value, size_t size) {
  out_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LayerConfig::add_out() {
  return out_.Add();
}
inline void LayerConfig::add_out(const ::std::string& value) {
  out_.Add()->assign(value);
}
inline void LayerConfig::add_out(const char* value) {
  out_.Add()->assign(value);
}
inline void LayerConfig::add_out(const char* value, size_t size) {
  out_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerConfig::out() const {
  return out_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerConfig::mutable_out() {
  return &out_;
}

// optional uint32 size = 7;
inline bool LayerConfig::has_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayerConfig::set_has_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayerConfig::clear_has_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayerConfig::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 LayerConfig::size() const {
  return size_;
}
inline void LayerConfig::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
}

// optional .PS.NN.ActivationConfig activation = 5;
inline bool LayerConfig::has_activation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LayerConfig::set_has_activation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LayerConfig::clear_has_activation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LayerConfig::clear_activation() {
  if (activation_ != NULL) activation_->::PS::NN::ActivationConfig::Clear();
  clear_has_activation();
}
inline const ::PS::NN::ActivationConfig& LayerConfig::activation() const {
  return activation_ != NULL ? *activation_ : *default_instance_->activation_;
}
inline ::PS::NN::ActivationConfig* LayerConfig::mutable_activation() {
  set_has_activation();
  if (activation_ == NULL) activation_ = new ::PS::NN::ActivationConfig;
  return activation_;
}
inline ::PS::NN::ActivationConfig* LayerConfig::release_activation() {
  clear_has_activation();
  ::PS::NN::ActivationConfig* temp = activation_;
  activation_ = NULL;
  return temp;
}
inline void LayerConfig::set_allocated_activation(::PS::NN::ActivationConfig* activation) {
  delete activation_;
  activation_ = activation;
  if (activation) {
    set_has_activation();
  } else {
    clear_has_activation();
  }
}

// optional int32 minibatch_size = 8 [default = 0];
inline bool LayerConfig::has_minibatch_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LayerConfig::set_has_minibatch_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LayerConfig::clear_has_minibatch_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LayerConfig::clear_minibatch_size() {
  minibatch_size_ = 0;
  clear_has_minibatch_size();
}
inline ::google::protobuf::int32 LayerConfig::minibatch_size() const {
  return minibatch_size_;
}
inline void LayerConfig::set_minibatch_size(::google::protobuf::int32 value) {
  set_has_minibatch_size();
  minibatch_size_ = value;
}

// optional double lr_scale = 6 [default = 1];
inline bool LayerConfig::has_lr_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LayerConfig::set_has_lr_scale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LayerConfig::clear_has_lr_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LayerConfig::clear_lr_scale() {
  lr_scale_ = 1;
  clear_has_lr_scale();
}
inline double LayerConfig::lr_scale() const {
  return lr_scale_;
}
inline void LayerConfig::set_lr_scale(double value) {
  set_has_lr_scale();
  lr_scale_ = value;
}

// optional .PS.DataConfig data = 11;
inline bool LayerConfig::has_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LayerConfig::set_has_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LayerConfig::clear_has_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LayerConfig::clear_data() {
  if (data_ != NULL) data_->::PS::DataConfig::Clear();
  clear_has_data();
}
inline const ::PS::DataConfig& LayerConfig::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::PS::DataConfig* LayerConfig::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::PS::DataConfig;
  return data_;
}
inline ::PS::DataConfig* LayerConfig::release_data() {
  clear_has_data();
  ::PS::DataConfig* temp = data_;
  data_ = NULL;
  return temp;
}
inline void LayerConfig::set_allocated_data(::PS::DataConfig* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional .PS.ParameterInitConfig init = 12;
inline bool LayerConfig::has_init() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LayerConfig::set_has_init() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LayerConfig::clear_has_init() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LayerConfig::clear_init() {
  if (init_ != NULL) init_->::PS::ParameterInitConfig::Clear();
  clear_has_init();
}
inline const ::PS::ParameterInitConfig& LayerConfig::init() const {
  return init_ != NULL ? *init_ : *default_instance_->init_;
}
inline ::PS::ParameterInitConfig* LayerConfig::mutable_init() {
  set_has_init();
  if (init_ == NULL) init_ = new ::PS::ParameterInitConfig;
  return init_;
}
inline ::PS::ParameterInitConfig* LayerConfig::release_init() {
  clear_has_init();
  ::PS::ParameterInitConfig* temp = init_;
  init_ = NULL;
  return temp;
}
inline void LayerConfig::set_allocated_init(::PS::ParameterInitConfig* init) {
  delete init_;
  init_ = init;
  if (init) {
    set_has_init();
  } else {
    clear_has_init();
  }
}

// -------------------------------------------------------------------

// NetConfig

// optional string name = 1;
inline bool NetConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetConfig::name() const {
  return *name_;
}
inline void NetConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NetConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NetConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .PS.NN.LayerConfig layer = 2;
inline int NetConfig::layer_size() const {
  return layer_.size();
}
inline void NetConfig::clear_layer() {
  layer_.Clear();
}
inline const ::PS::NN::LayerConfig& NetConfig::layer(int index) const {
  return layer_.Get(index);
}
inline ::PS::NN::LayerConfig* NetConfig::mutable_layer(int index) {
  return layer_.Mutable(index);
}
inline ::PS::NN::LayerConfig* NetConfig::add_layer() {
  return layer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PS::NN::LayerConfig >&
NetConfig::layer() const {
  return layer_;
}
inline ::google::protobuf::RepeatedPtrField< ::PS::NN::LayerConfig >*
NetConfig::mutable_layer() {
  return &layer_;
}

// -------------------------------------------------------------------

// ActivationConfig

// required .PS.NN.ActivationConfig.Type type = 1;
inline bool ActivationConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivationConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivationConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivationConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::PS::NN::ActivationConfig_Type ActivationConfig::type() const {
  return static_cast< ::PS::NN::ActivationConfig_Type >(type_);
}
inline void ActivationConfig::set_type(::PS::NN::ActivationConfig_Type value) {
  assert(::PS::NN::ActivationConfig_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// SolverConfig

// required .PS.NN.SolverConfig.Type type = 1;
inline bool SolverConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverConfig::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PS::NN::SolverConfig_Type SolverConfig::type() const {
  return static_cast< ::PS::NN::SolverConfig_Type >(type_);
}
inline void SolverConfig::set_type(::PS::NN::SolverConfig_Type value) {
  assert(::PS::NN::SolverConfig_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .PS.NN.SolverConfig.Update update = 6;
inline bool SolverConfig::has_update() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverConfig::set_has_update() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverConfig::clear_has_update() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverConfig::clear_update() {
  update_ = 1;
  clear_has_update();
}
inline ::PS::NN::SolverConfig_Update SolverConfig::update() const {
  return static_cast< ::PS::NN::SolverConfig_Update >(update_);
}
inline void SolverConfig::set_update(::PS::NN::SolverConfig_Update value) {
  assert(::PS::NN::SolverConfig_Update_IsValid(value));
  set_has_update();
  update_ = value;
}

// optional .PS.LearningRateConfig lr = 2;
inline bool SolverConfig::has_lr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolverConfig::set_has_lr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolverConfig::clear_has_lr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolverConfig::clear_lr() {
  if (lr_ != NULL) lr_->::PS::LearningRateConfig::Clear();
  clear_has_lr();
}
inline const ::PS::LearningRateConfig& SolverConfig::lr() const {
  return lr_ != NULL ? *lr_ : *default_instance_->lr_;
}
inline ::PS::LearningRateConfig* SolverConfig::mutable_lr() {
  set_has_lr();
  if (lr_ == NULL) lr_ = new ::PS::LearningRateConfig;
  return lr_;
}
inline ::PS::LearningRateConfig* SolverConfig::release_lr() {
  clear_has_lr();
  ::PS::LearningRateConfig* temp = lr_;
  lr_ = NULL;
  return temp;
}
inline void SolverConfig::set_allocated_lr(::PS::LearningRateConfig* lr) {
  delete lr_;
  lr_ = lr;
  if (lr) {
    set_has_lr();
  } else {
    clear_has_lr();
  }
}

// optional int32 max_iteration = 3 [default = 1000];
inline bool SolverConfig::has_max_iteration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolverConfig::set_has_max_iteration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolverConfig::clear_has_max_iteration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolverConfig::clear_max_iteration() {
  max_iteration_ = 1000;
  clear_has_max_iteration();
}
inline ::google::protobuf::int32 SolverConfig::max_iteration() const {
  return max_iteration_;
}
inline void SolverConfig::set_max_iteration(::google::protobuf::int32 value) {
  set_has_max_iteration();
  max_iteration_ = value;
}

// optional int32 display = 4 [default = 100];
inline bool SolverConfig::has_display() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SolverConfig::set_has_display() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SolverConfig::clear_has_display() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SolverConfig::clear_display() {
  display_ = 100;
  clear_has_display();
}
inline ::google::protobuf::int32 SolverConfig::display() const {
  return display_;
}
inline void SolverConfig::set_display(::google::protobuf::int32 value) {
  set_has_display();
  display_ = value;
}

// optional int32 validation = 5 [default = 100];
inline bool SolverConfig::has_validation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SolverConfig::set_has_validation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SolverConfig::clear_has_validation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SolverConfig::clear_validation() {
  validation_ = 100;
  clear_has_validation();
}
inline ::google::protobuf::int32 SolverConfig::validation() const {
  return validation_;
}
inline void SolverConfig::set_validation(::google::protobuf::int32 value) {
  set_has_validation();
  validation_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NN
}  // namespace PS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::NN::LayerConfig_Type>() {
  return ::PS::NN::LayerConfig_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::NN::ActivationConfig_Type>() {
  return ::PS::NN::ActivationConfig_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::NN::SolverConfig_Type>() {
  return ::PS::NN::SolverConfig_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::NN::SolverConfig_Update>() {
  return ::PS::NN::SolverConfig_Update_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fneural_5fnetwork_2eproto__INCLUDED
