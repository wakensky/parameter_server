// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/risk_minimization.proto

#ifndef PROTOBUF_proto_2frisk_5fminimization_2eproto__INCLUDED
#define PROTOBUF_proto_2frisk_5fminimization_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/range.pb.h"
#include "proto/evaluation.pb.h"
// @@protoc_insertion_point(includes)

namespace PS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2frisk_5fminimization_2eproto();
void protobuf_AssignDesc_proto_2frisk_5fminimization_2eproto();
void protobuf_ShutdownFile_proto_2frisk_5fminimization_2eproto();

class BlockSolverConfig;
class BCDL1LRConfig;
class LossConfig;
class LearnerConfig;
class RiskMinProgress;
class RiskMinCall;
class AggGradLearnerArg;

enum LossConfig_Type {
  LossConfig_Type_SQUARE = 1,
  LossConfig_Type_LOGIT = 2,
  LossConfig_Type_HINGE = 3,
  LossConfig_Type_SQUARE_HINGE = 4
};
bool LossConfig_Type_IsValid(int value);
const LossConfig_Type LossConfig_Type_Type_MIN = LossConfig_Type_SQUARE;
const LossConfig_Type LossConfig_Type_Type_MAX = LossConfig_Type_SQUARE_HINGE;
const int LossConfig_Type_Type_ARRAYSIZE = LossConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LossConfig_Type_descriptor();
inline const ::std::string& LossConfig_Type_Name(LossConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LossConfig_Type_descriptor(), value);
}
inline bool LossConfig_Type_Parse(
    const ::std::string& name, LossConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LossConfig_Type>(
    LossConfig_Type_descriptor(), name, value);
}
enum LearnerConfig_Type {
  LearnerConfig_Type_GRADIENT_DESCENT = 1,
  LearnerConfig_Type_PROXIMAL_GRADIENT = 2,
  LearnerConfig_Type_LBFGS = 3
};
bool LearnerConfig_Type_IsValid(int value);
const LearnerConfig_Type LearnerConfig_Type_Type_MIN = LearnerConfig_Type_GRADIENT_DESCENT;
const LearnerConfig_Type LearnerConfig_Type_Type_MAX = LearnerConfig_Type_LBFGS;
const int LearnerConfig_Type_Type_ARRAYSIZE = LearnerConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LearnerConfig_Type_descriptor();
inline const ::std::string& LearnerConfig_Type_Name(LearnerConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LearnerConfig_Type_descriptor(), value);
}
inline bool LearnerConfig_Type_Parse(
    const ::std::string& name, LearnerConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LearnerConfig_Type>(
    LearnerConfig_Type_descriptor(), name, value);
}
enum RiskMinCall_Command {
  RiskMinCall_Command_PREPARE_DATA = 1,
  RiskMinCall_Command_UPDATE_MODEL = 2,
  RiskMinCall_Command_EVALUATE_PROGRESS = 3,
  RiskMinCall_Command_SAVE_MODEL = 4,
  RiskMinCall_Command_SAVE_AS_DENSE = 7,
  RiskMinCall_Command_RECOVER = 5,
  RiskMinCall_Command_COMPUTE_VALIDATION_AUC = 6,
  RiskMinCall_Command_LOAD_DATA = 8
};
bool RiskMinCall_Command_IsValid(int value);
const RiskMinCall_Command RiskMinCall_Command_Command_MIN = RiskMinCall_Command_PREPARE_DATA;
const RiskMinCall_Command RiskMinCall_Command_Command_MAX = RiskMinCall_Command_LOAD_DATA;
const int RiskMinCall_Command_Command_ARRAYSIZE = RiskMinCall_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* RiskMinCall_Command_descriptor();
inline const ::std::string& RiskMinCall_Command_Name(RiskMinCall_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    RiskMinCall_Command_descriptor(), value);
}
inline bool RiskMinCall_Command_Parse(
    const ::std::string& name, RiskMinCall_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RiskMinCall_Command>(
    RiskMinCall_Command_descriptor(), name, value);
}
// ===================================================================

class BlockSolverConfig : public ::google::protobuf::Message {
 public:
  BlockSolverConfig();
  virtual ~BlockSolverConfig();

  BlockSolverConfig(const BlockSolverConfig& from);

  inline BlockSolverConfig& operator=(const BlockSolverConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockSolverConfig& default_instance();

  void Swap(BlockSolverConfig* other);

  // implements Message ----------------------------------------------

  BlockSolverConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockSolverConfig& from);
  void MergeFrom(const BlockSolverConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 minibatch_size = 1 [default = 0];
  inline bool has_minibatch_size() const;
  inline void clear_minibatch_size();
  static const int kMinibatchSizeFieldNumber = 1;
  inline ::google::protobuf::int64 minibatch_size() const;
  inline void set_minibatch_size(::google::protobuf::int64 value);

  // optional float feature_block_ratio = 2 [default = 0];
  inline bool has_feature_block_ratio() const;
  inline void clear_feature_block_ratio();
  static const int kFeatureBlockRatioFieldNumber = 2;
  inline float feature_block_ratio() const;
  inline void set_feature_block_ratio(float value);

  // optional bool random_feature_block_order = 3 [default = true];
  inline bool has_random_feature_block_order() const;
  inline void clear_random_feature_block_order();
  static const int kRandomFeatureBlockOrderFieldNumber = 3;
  inline bool random_feature_block_order() const;
  inline void set_random_feature_block_order(bool value);

  // optional int32 max_pass_of_data = 8 [default = 10];
  inline bool has_max_pass_of_data() const;
  inline void clear_max_pass_of_data();
  static const int kMaxPassOfDataFieldNumber = 8;
  inline ::google::protobuf::int32 max_pass_of_data() const;
  inline void set_max_pass_of_data(::google::protobuf::int32 value);

  // optional int32 max_block_delay = 10 [default = 0];
  inline bool has_max_block_delay() const;
  inline void clear_max_block_delay();
  static const int kMaxBlockDelayFieldNumber = 10;
  inline ::google::protobuf::int32 max_block_delay() const;
  inline void set_max_block_delay(::google::protobuf::int32 value);

  // optional double epsilon = 11 [default = 0.0001];
  inline bool has_epsilon() const;
  inline void clear_epsilon();
  static const int kEpsilonFieldNumber = 11;
  inline double epsilon() const;
  inline void set_epsilon(double value);

  // optional int64 auc_goodness = 12 [default = 100000];
  inline bool has_auc_goodness() const;
  inline void clear_auc_goodness();
  static const int kAucGoodnessFieldNumber = 12;
  inline ::google::protobuf::int64 auc_goodness() const;
  inline void set_auc_goodness(::google::protobuf::int64 value);

  // optional int32 tail_feature_count = 15 [default = 4];
  inline bool has_tail_feature_count() const;
  inline void clear_tail_feature_count();
  static const int kTailFeatureCountFieldNumber = 15;
  inline ::google::protobuf::int32 tail_feature_count() const;
  inline void set_tail_feature_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PS.BlockSolverConfig)
 private:
  inline void set_has_minibatch_size();
  inline void clear_has_minibatch_size();
  inline void set_has_feature_block_ratio();
  inline void clear_has_feature_block_ratio();
  inline void set_has_random_feature_block_order();
  inline void clear_has_random_feature_block_order();
  inline void set_has_max_pass_of_data();
  inline void clear_has_max_pass_of_data();
  inline void set_has_max_block_delay();
  inline void clear_has_max_block_delay();
  inline void set_has_epsilon();
  inline void clear_has_epsilon();
  inline void set_has_auc_goodness();
  inline void clear_has_auc_goodness();
  inline void set_has_tail_feature_count();
  inline void clear_has_tail_feature_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 minibatch_size_;
  float feature_block_ratio_;
  bool random_feature_block_order_;
  ::google::protobuf::int32 max_pass_of_data_;
  ::google::protobuf::int32 max_block_delay_;
  double epsilon_;
  ::google::protobuf::int64 auc_goodness_;
  ::google::protobuf::int32 tail_feature_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2frisk_5fminimization_2eproto();
  friend void protobuf_AssignDesc_proto_2frisk_5fminimization_2eproto();
  friend void protobuf_ShutdownFile_proto_2frisk_5fminimization_2eproto();

  void InitAsDefaultInstance();
  static BlockSolverConfig* default_instance_;
};
// -------------------------------------------------------------------

class BCDL1LRConfig : public ::google::protobuf::Message {
 public:
  BCDL1LRConfig();
  virtual ~BCDL1LRConfig();

  BCDL1LRConfig(const BCDL1LRConfig& from);

  inline BCDL1LRConfig& operator=(const BCDL1LRConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BCDL1LRConfig& default_instance();

  void Swap(BCDL1LRConfig* other);

  // implements Message ----------------------------------------------

  BCDL1LRConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BCDL1LRConfig& from);
  void MergeFrom(const BCDL1LRConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double delta_init_value = 1 [default = 1];
  inline bool has_delta_init_value() const;
  inline void clear_delta_init_value();
  static const int kDeltaInitValueFieldNumber = 1;
  inline double delta_init_value() const;
  inline void set_delta_init_value(double value);

  // optional double delta_max_value = 2 [default = 5];
  inline bool has_delta_max_value() const;
  inline void clear_delta_max_value();
  static const int kDeltaMaxValueFieldNumber = 2;
  inline double delta_max_value() const;
  inline void set_delta_max_value(double value);

  // optional double kkt_filter_threshold_ratio = 10 [default = 10];
  inline bool has_kkt_filter_threshold_ratio() const;
  inline void clear_kkt_filter_threshold_ratio();
  static const int kKktFilterThresholdRatioFieldNumber = 10;
  inline double kkt_filter_threshold_ratio() const;
  inline void set_kkt_filter_threshold_ratio(double value);

  // @@protoc_insertion_point(class_scope:PS.BCDL1LRConfig)
 private:
  inline void set_has_delta_init_value();
  inline void clear_has_delta_init_value();
  inline void set_has_delta_max_value();
  inline void clear_has_delta_max_value();
  inline void set_has_kkt_filter_threshold_ratio();
  inline void clear_has_kkt_filter_threshold_ratio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double delta_init_value_;
  double delta_max_value_;
  double kkt_filter_threshold_ratio_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2frisk_5fminimization_2eproto();
  friend void protobuf_AssignDesc_proto_2frisk_5fminimization_2eproto();
  friend void protobuf_ShutdownFile_proto_2frisk_5fminimization_2eproto();

  void InitAsDefaultInstance();
  static BCDL1LRConfig* default_instance_;
};
// -------------------------------------------------------------------

class LossConfig : public ::google::protobuf::Message {
 public:
  LossConfig();
  virtual ~LossConfig();

  LossConfig(const LossConfig& from);

  inline LossConfig& operator=(const LossConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LossConfig& default_instance();

  void Swap(LossConfig* other);

  // implements Message ----------------------------------------------

  LossConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LossConfig& from);
  void MergeFrom(const LossConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LossConfig_Type Type;
  static const Type SQUARE = LossConfig_Type_SQUARE;
  static const Type LOGIT = LossConfig_Type_LOGIT;
  static const Type HINGE = LossConfig_Type_HINGE;
  static const Type SQUARE_HINGE = LossConfig_Type_SQUARE_HINGE;
  static inline bool Type_IsValid(int value) {
    return LossConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LossConfig_Type_Type_MIN;
  static const Type Type_MAX =
    LossConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LossConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LossConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LossConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LossConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PS.LossConfig.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PS::LossConfig_Type type() const;
  inline void set_type(::PS::LossConfig_Type value);

  // @@protoc_insertion_point(class_scope:PS.LossConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2frisk_5fminimization_2eproto();
  friend void protobuf_AssignDesc_proto_2frisk_5fminimization_2eproto();
  friend void protobuf_ShutdownFile_proto_2frisk_5fminimization_2eproto();

  void InitAsDefaultInstance();
  static LossConfig* default_instance_;
};
// -------------------------------------------------------------------

class LearnerConfig : public ::google::protobuf::Message {
 public:
  LearnerConfig();
  virtual ~LearnerConfig();

  LearnerConfig(const LearnerConfig& from);

  inline LearnerConfig& operator=(const LearnerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LearnerConfig& default_instance();

  void Swap(LearnerConfig* other);

  // implements Message ----------------------------------------------

  LearnerConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LearnerConfig& from);
  void MergeFrom(const LearnerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LearnerConfig_Type Type;
  static const Type GRADIENT_DESCENT = LearnerConfig_Type_GRADIENT_DESCENT;
  static const Type PROXIMAL_GRADIENT = LearnerConfig_Type_PROXIMAL_GRADIENT;
  static const Type LBFGS = LearnerConfig_Type_LBFGS;
  static inline bool Type_IsValid(int value) {
    return LearnerConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LearnerConfig_Type_Type_MIN;
  static const Type Type_MAX =
    LearnerConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LearnerConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LearnerConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LearnerConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LearnerConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PS.LearnerConfig.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PS::LearnerConfig_Type type() const;
  inline void set_type(::PS::LearnerConfig_Type value);

  // @@protoc_insertion_point(class_scope:PS.LearnerConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2frisk_5fminimization_2eproto();
  friend void protobuf_AssignDesc_proto_2frisk_5fminimization_2eproto();
  friend void protobuf_ShutdownFile_proto_2frisk_5fminimization_2eproto();

  void InitAsDefaultInstance();
  static LearnerConfig* default_instance_;
};
// -------------------------------------------------------------------

class RiskMinProgress : public ::google::protobuf::Message {
 public:
  RiskMinProgress();
  virtual ~RiskMinProgress();

  RiskMinProgress(const RiskMinProgress& from);

  inline RiskMinProgress& operator=(const RiskMinProgress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskMinProgress& default_instance();

  void Swap(RiskMinProgress* other);

  // implements Message ----------------------------------------------

  RiskMinProgress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RiskMinProgress& from);
  void MergeFrom(const RiskMinProgress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double objv = 1;
  inline bool has_objv() const;
  inline void clear_objv();
  static const int kObjvFieldNumber = 1;
  inline double objv() const;
  inline void set_objv(double value);

  // optional double relative_objv = 2;
  inline bool has_relative_objv() const;
  inline void clear_relative_objv();
  static const int kRelativeObjvFieldNumber = 2;
  inline double relative_objv() const;
  inline void set_relative_objv(double value);

  // optional uint64 nnz_w = 5;
  inline bool has_nnz_w() const;
  inline void clear_nnz_w();
  static const int kNnzWFieldNumber = 5;
  inline ::google::protobuf::uint64 nnz_w() const;
  inline void set_nnz_w(::google::protobuf::uint64 value);

  // optional double violation = 6;
  inline bool has_violation() const;
  inline void clear_violation();
  static const int kViolationFieldNumber = 6;
  inline double violation() const;
  inline void set_violation(double value);

  // optional uint64 nnz_active_set = 7;
  inline bool has_nnz_active_set() const;
  inline void clear_nnz_active_set();
  static const int kNnzActiveSetFieldNumber = 7;
  inline ::google::protobuf::uint64 nnz_active_set() const;
  inline void set_nnz_active_set(::google::protobuf::uint64 value);

  // optional double training_auc = 8;
  inline bool has_training_auc() const;
  inline void clear_training_auc();
  static const int kTrainingAucFieldNumber = 8;
  inline double training_auc() const;
  inline void set_training_auc(double value);

  // optional .PS.AUCData training_auc_data = 9;
  inline bool has_training_auc_data() const;
  inline void clear_training_auc_data();
  static const int kTrainingAucDataFieldNumber = 9;
  inline const ::PS::AUCData& training_auc_data() const;
  inline ::PS::AUCData* mutable_training_auc_data();
  inline ::PS::AUCData* release_training_auc_data();
  inline void set_allocated_training_auc_data(::PS::AUCData* training_auc_data);

  // optional double total_time = 10;
  inline bool has_total_time() const;
  inline void clear_total_time();
  static const int kTotalTimeFieldNumber = 10;
  inline double total_time() const;
  inline void set_total_time(double value);

  // repeated double busy_time = 11;
  inline int busy_time_size() const;
  inline void clear_busy_time();
  static const int kBusyTimeFieldNumber = 11;
  inline double busy_time(int index) const;
  inline void set_busy_time(int index, double value);
  inline void add_busy_time(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      busy_time() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_busy_time();

  // @@protoc_insertion_point(class_scope:PS.RiskMinProgress)
 private:
  inline void set_has_objv();
  inline void clear_has_objv();
  inline void set_has_relative_objv();
  inline void clear_has_relative_objv();
  inline void set_has_nnz_w();
  inline void clear_has_nnz_w();
  inline void set_has_violation();
  inline void clear_has_violation();
  inline void set_has_nnz_active_set();
  inline void clear_has_nnz_active_set();
  inline void set_has_training_auc();
  inline void clear_has_training_auc();
  inline void set_has_training_auc_data();
  inline void clear_has_training_auc_data();
  inline void set_has_total_time();
  inline void clear_has_total_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double objv_;
  double relative_objv_;
  ::google::protobuf::uint64 nnz_w_;
  double violation_;
  ::google::protobuf::uint64 nnz_active_set_;
  double training_auc_;
  ::PS::AUCData* training_auc_data_;
  double total_time_;
  ::google::protobuf::RepeatedField< double > busy_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2frisk_5fminimization_2eproto();
  friend void protobuf_AssignDesc_proto_2frisk_5fminimization_2eproto();
  friend void protobuf_ShutdownFile_proto_2frisk_5fminimization_2eproto();

  void InitAsDefaultInstance();
  static RiskMinProgress* default_instance_;
};
// -------------------------------------------------------------------

class RiskMinCall : public ::google::protobuf::Message {
 public:
  RiskMinCall();
  virtual ~RiskMinCall();

  RiskMinCall(const RiskMinCall& from);

  inline RiskMinCall& operator=(const RiskMinCall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RiskMinCall& default_instance();

  void Swap(RiskMinCall* other);

  // implements Message ----------------------------------------------

  RiskMinCall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RiskMinCall& from);
  void MergeFrom(const RiskMinCall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RiskMinCall_Command Command;
  static const Command PREPARE_DATA = RiskMinCall_Command_PREPARE_DATA;
  static const Command UPDATE_MODEL = RiskMinCall_Command_UPDATE_MODEL;
  static const Command EVALUATE_PROGRESS = RiskMinCall_Command_EVALUATE_PROGRESS;
  static const Command SAVE_MODEL = RiskMinCall_Command_SAVE_MODEL;
  static const Command SAVE_AS_DENSE = RiskMinCall_Command_SAVE_AS_DENSE;
  static const Command RECOVER = RiskMinCall_Command_RECOVER;
  static const Command COMPUTE_VALIDATION_AUC = RiskMinCall_Command_COMPUTE_VALIDATION_AUC;
  static const Command LOAD_DATA = RiskMinCall_Command_LOAD_DATA;
  static inline bool Command_IsValid(int value) {
    return RiskMinCall_Command_IsValid(value);
  }
  static const Command Command_MIN =
    RiskMinCall_Command_Command_MIN;
  static const Command Command_MAX =
    RiskMinCall_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    RiskMinCall_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return RiskMinCall_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return RiskMinCall_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return RiskMinCall_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PS.RiskMinCall.Command cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::PS::RiskMinCall_Command cmd() const;
  inline void set_cmd(::PS::RiskMinCall_Command value);

  // optional .PS.PbRange key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::PS::PbRange& key() const;
  inline ::PS::PbRange* mutable_key();
  inline ::PS::PbRange* release_key();
  inline void set_allocated_key(::PS::PbRange* key);

  // optional int32 feature_group_id = 3;
  inline bool has_feature_group_id() const;
  inline void clear_feature_group_id();
  static const int kFeatureGroupIdFieldNumber = 3;
  inline ::google::protobuf::int32 feature_group_id() const;
  inline void set_feature_group_id(::google::protobuf::int32 value);

  // optional double kkt_filter_threshold = 4;
  inline bool has_kkt_filter_threshold() const;
  inline void clear_kkt_filter_threshold();
  static const int kKktFilterThresholdFieldNumber = 4;
  inline double kkt_filter_threshold() const;
  inline void set_kkt_filter_threshold(double value);

  // optional bool kkt_filter_reset = 5;
  inline bool has_kkt_filter_reset() const;
  inline void clear_kkt_filter_reset();
  static const int kKktFilterResetFieldNumber = 5;
  inline bool kkt_filter_reset() const;
  inline void set_kkt_filter_reset(bool value);

  // repeated .PS.PbRange reduce_range = 6;
  inline int reduce_range_size() const;
  inline void clear_reduce_range();
  static const int kReduceRangeFieldNumber = 6;
  inline const ::PS::PbRange& reduce_range(int index) const;
  inline ::PS::PbRange* mutable_reduce_range(int index);
  inline ::PS::PbRange* add_reduce_range();
  inline const ::google::protobuf::RepeatedPtrField< ::PS::PbRange >&
      reduce_range() const;
  inline ::google::protobuf::RepeatedPtrField< ::PS::PbRange >*
      mutable_reduce_range();

  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:PS.RiskMinCall)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_feature_group_id();
  inline void clear_has_feature_group_id();
  inline void set_has_kkt_filter_threshold();
  inline void clear_has_kkt_filter_threshold();
  inline void set_has_kkt_filter_reset();
  inline void clear_has_kkt_filter_reset();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PS::PbRange* key_;
  int cmd_;
  ::google::protobuf::int32 feature_group_id_;
  double kkt_filter_threshold_;
  ::google::protobuf::RepeatedPtrField< ::PS::PbRange > reduce_range_;
  ::std::string* name_;
  bool kkt_filter_reset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2frisk_5fminimization_2eproto();
  friend void protobuf_AssignDesc_proto_2frisk_5fminimization_2eproto();
  friend void protobuf_ShutdownFile_proto_2frisk_5fminimization_2eproto();

  void InitAsDefaultInstance();
  static RiskMinCall* default_instance_;
};
// -------------------------------------------------------------------

class AggGradLearnerArg : public ::google::protobuf::Message {
 public:
  AggGradLearnerArg();
  virtual ~AggGradLearnerArg();

  AggGradLearnerArg(const AggGradLearnerArg& from);

  inline AggGradLearnerArg& operator=(const AggGradLearnerArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AggGradLearnerArg& default_instance();

  void Swap(AggGradLearnerArg* other);

  // implements Message ----------------------------------------------

  AggGradLearnerArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AggGradLearnerArg& from);
  void MergeFrom(const AggGradLearnerArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double learning_rate = 1;
  inline bool has_learning_rate() const;
  inline void clear_learning_rate();
  static const int kLearningRateFieldNumber = 1;
  inline double learning_rate() const;
  inline void set_learning_rate(double value);

  // @@protoc_insertion_point(class_scope:PS.AggGradLearnerArg)
 private:
  inline void set_has_learning_rate();
  inline void clear_has_learning_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double learning_rate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2frisk_5fminimization_2eproto();
  friend void protobuf_AssignDesc_proto_2frisk_5fminimization_2eproto();
  friend void protobuf_ShutdownFile_proto_2frisk_5fminimization_2eproto();

  void InitAsDefaultInstance();
  static AggGradLearnerArg* default_instance_;
};
// ===================================================================


// ===================================================================

// BlockSolverConfig

// optional int64 minibatch_size = 1 [default = 0];
inline bool BlockSolverConfig::has_minibatch_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockSolverConfig::set_has_minibatch_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockSolverConfig::clear_has_minibatch_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockSolverConfig::clear_minibatch_size() {
  minibatch_size_ = GOOGLE_LONGLONG(0);
  clear_has_minibatch_size();
}
inline ::google::protobuf::int64 BlockSolverConfig::minibatch_size() const {
  return minibatch_size_;
}
inline void BlockSolverConfig::set_minibatch_size(::google::protobuf::int64 value) {
  set_has_minibatch_size();
  minibatch_size_ = value;
}

// optional float feature_block_ratio = 2 [default = 0];
inline bool BlockSolverConfig::has_feature_block_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockSolverConfig::set_has_feature_block_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockSolverConfig::clear_has_feature_block_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockSolverConfig::clear_feature_block_ratio() {
  feature_block_ratio_ = 0;
  clear_has_feature_block_ratio();
}
inline float BlockSolverConfig::feature_block_ratio() const {
  return feature_block_ratio_;
}
inline void BlockSolverConfig::set_feature_block_ratio(float value) {
  set_has_feature_block_ratio();
  feature_block_ratio_ = value;
}

// optional bool random_feature_block_order = 3 [default = true];
inline bool BlockSolverConfig::has_random_feature_block_order() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockSolverConfig::set_has_random_feature_block_order() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockSolverConfig::clear_has_random_feature_block_order() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockSolverConfig::clear_random_feature_block_order() {
  random_feature_block_order_ = true;
  clear_has_random_feature_block_order();
}
inline bool BlockSolverConfig::random_feature_block_order() const {
  return random_feature_block_order_;
}
inline void BlockSolverConfig::set_random_feature_block_order(bool value) {
  set_has_random_feature_block_order();
  random_feature_block_order_ = value;
}

// optional int32 max_pass_of_data = 8 [default = 10];
inline bool BlockSolverConfig::has_max_pass_of_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockSolverConfig::set_has_max_pass_of_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockSolverConfig::clear_has_max_pass_of_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockSolverConfig::clear_max_pass_of_data() {
  max_pass_of_data_ = 10;
  clear_has_max_pass_of_data();
}
inline ::google::protobuf::int32 BlockSolverConfig::max_pass_of_data() const {
  return max_pass_of_data_;
}
inline void BlockSolverConfig::set_max_pass_of_data(::google::protobuf::int32 value) {
  set_has_max_pass_of_data();
  max_pass_of_data_ = value;
}

// optional int32 max_block_delay = 10 [default = 0];
inline bool BlockSolverConfig::has_max_block_delay() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockSolverConfig::set_has_max_block_delay() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlockSolverConfig::clear_has_max_block_delay() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlockSolverConfig::clear_max_block_delay() {
  max_block_delay_ = 0;
  clear_has_max_block_delay();
}
inline ::google::protobuf::int32 BlockSolverConfig::max_block_delay() const {
  return max_block_delay_;
}
inline void BlockSolverConfig::set_max_block_delay(::google::protobuf::int32 value) {
  set_has_max_block_delay();
  max_block_delay_ = value;
}

// optional double epsilon = 11 [default = 0.0001];
inline bool BlockSolverConfig::has_epsilon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockSolverConfig::set_has_epsilon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlockSolverConfig::clear_has_epsilon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlockSolverConfig::clear_epsilon() {
  epsilon_ = 0.0001;
  clear_has_epsilon();
}
inline double BlockSolverConfig::epsilon() const {
  return epsilon_;
}
inline void BlockSolverConfig::set_epsilon(double value) {
  set_has_epsilon();
  epsilon_ = value;
}

// optional int64 auc_goodness = 12 [default = 100000];
inline bool BlockSolverConfig::has_auc_goodness() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlockSolverConfig::set_has_auc_goodness() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlockSolverConfig::clear_has_auc_goodness() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlockSolverConfig::clear_auc_goodness() {
  auc_goodness_ = GOOGLE_LONGLONG(100000);
  clear_has_auc_goodness();
}
inline ::google::protobuf::int64 BlockSolverConfig::auc_goodness() const {
  return auc_goodness_;
}
inline void BlockSolverConfig::set_auc_goodness(::google::protobuf::int64 value) {
  set_has_auc_goodness();
  auc_goodness_ = value;
}

// optional int32 tail_feature_count = 15 [default = 4];
inline bool BlockSolverConfig::has_tail_feature_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlockSolverConfig::set_has_tail_feature_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlockSolverConfig::clear_has_tail_feature_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlockSolverConfig::clear_tail_feature_count() {
  tail_feature_count_ = 4;
  clear_has_tail_feature_count();
}
inline ::google::protobuf::int32 BlockSolverConfig::tail_feature_count() const {
  return tail_feature_count_;
}
inline void BlockSolverConfig::set_tail_feature_count(::google::protobuf::int32 value) {
  set_has_tail_feature_count();
  tail_feature_count_ = value;
}

// -------------------------------------------------------------------

// BCDL1LRConfig

// optional double delta_init_value = 1 [default = 1];
inline bool BCDL1LRConfig::has_delta_init_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BCDL1LRConfig::set_has_delta_init_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BCDL1LRConfig::clear_has_delta_init_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BCDL1LRConfig::clear_delta_init_value() {
  delta_init_value_ = 1;
  clear_has_delta_init_value();
}
inline double BCDL1LRConfig::delta_init_value() const {
  return delta_init_value_;
}
inline void BCDL1LRConfig::set_delta_init_value(double value) {
  set_has_delta_init_value();
  delta_init_value_ = value;
}

// optional double delta_max_value = 2 [default = 5];
inline bool BCDL1LRConfig::has_delta_max_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BCDL1LRConfig::set_has_delta_max_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BCDL1LRConfig::clear_has_delta_max_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BCDL1LRConfig::clear_delta_max_value() {
  delta_max_value_ = 5;
  clear_has_delta_max_value();
}
inline double BCDL1LRConfig::delta_max_value() const {
  return delta_max_value_;
}
inline void BCDL1LRConfig::set_delta_max_value(double value) {
  set_has_delta_max_value();
  delta_max_value_ = value;
}

// optional double kkt_filter_threshold_ratio = 10 [default = 10];
inline bool BCDL1LRConfig::has_kkt_filter_threshold_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BCDL1LRConfig::set_has_kkt_filter_threshold_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BCDL1LRConfig::clear_has_kkt_filter_threshold_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BCDL1LRConfig::clear_kkt_filter_threshold_ratio() {
  kkt_filter_threshold_ratio_ = 10;
  clear_has_kkt_filter_threshold_ratio();
}
inline double BCDL1LRConfig::kkt_filter_threshold_ratio() const {
  return kkt_filter_threshold_ratio_;
}
inline void BCDL1LRConfig::set_kkt_filter_threshold_ratio(double value) {
  set_has_kkt_filter_threshold_ratio();
  kkt_filter_threshold_ratio_ = value;
}

// -------------------------------------------------------------------

// LossConfig

// required .PS.LossConfig.Type type = 1;
inline bool LossConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LossConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LossConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LossConfig::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PS::LossConfig_Type LossConfig::type() const {
  return static_cast< ::PS::LossConfig_Type >(type_);
}
inline void LossConfig::set_type(::PS::LossConfig_Type value) {
  assert(::PS::LossConfig_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// LearnerConfig

// required .PS.LearnerConfig.Type type = 1;
inline bool LearnerConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LearnerConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LearnerConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LearnerConfig::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PS::LearnerConfig_Type LearnerConfig::type() const {
  return static_cast< ::PS::LearnerConfig_Type >(type_);
}
inline void LearnerConfig::set_type(::PS::LearnerConfig_Type value) {
  assert(::PS::LearnerConfig_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// RiskMinProgress

// optional double objv = 1;
inline bool RiskMinProgress::has_objv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RiskMinProgress::set_has_objv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RiskMinProgress::clear_has_objv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RiskMinProgress::clear_objv() {
  objv_ = 0;
  clear_has_objv();
}
inline double RiskMinProgress::objv() const {
  return objv_;
}
inline void RiskMinProgress::set_objv(double value) {
  set_has_objv();
  objv_ = value;
}

// optional double relative_objv = 2;
inline bool RiskMinProgress::has_relative_objv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RiskMinProgress::set_has_relative_objv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RiskMinProgress::clear_has_relative_objv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RiskMinProgress::clear_relative_objv() {
  relative_objv_ = 0;
  clear_has_relative_objv();
}
inline double RiskMinProgress::relative_objv() const {
  return relative_objv_;
}
inline void RiskMinProgress::set_relative_objv(double value) {
  set_has_relative_objv();
  relative_objv_ = value;
}

// optional uint64 nnz_w = 5;
inline bool RiskMinProgress::has_nnz_w() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RiskMinProgress::set_has_nnz_w() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RiskMinProgress::clear_has_nnz_w() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RiskMinProgress::clear_nnz_w() {
  nnz_w_ = GOOGLE_ULONGLONG(0);
  clear_has_nnz_w();
}
inline ::google::protobuf::uint64 RiskMinProgress::nnz_w() const {
  return nnz_w_;
}
inline void RiskMinProgress::set_nnz_w(::google::protobuf::uint64 value) {
  set_has_nnz_w();
  nnz_w_ = value;
}

// optional double violation = 6;
inline bool RiskMinProgress::has_violation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RiskMinProgress::set_has_violation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RiskMinProgress::clear_has_violation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RiskMinProgress::clear_violation() {
  violation_ = 0;
  clear_has_violation();
}
inline double RiskMinProgress::violation() const {
  return violation_;
}
inline void RiskMinProgress::set_violation(double value) {
  set_has_violation();
  violation_ = value;
}

// optional uint64 nnz_active_set = 7;
inline bool RiskMinProgress::has_nnz_active_set() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RiskMinProgress::set_has_nnz_active_set() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RiskMinProgress::clear_has_nnz_active_set() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RiskMinProgress::clear_nnz_active_set() {
  nnz_active_set_ = GOOGLE_ULONGLONG(0);
  clear_has_nnz_active_set();
}
inline ::google::protobuf::uint64 RiskMinProgress::nnz_active_set() const {
  return nnz_active_set_;
}
inline void RiskMinProgress::set_nnz_active_set(::google::protobuf::uint64 value) {
  set_has_nnz_active_set();
  nnz_active_set_ = value;
}

// optional double training_auc = 8;
inline bool RiskMinProgress::has_training_auc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RiskMinProgress::set_has_training_auc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RiskMinProgress::clear_has_training_auc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RiskMinProgress::clear_training_auc() {
  training_auc_ = 0;
  clear_has_training_auc();
}
inline double RiskMinProgress::training_auc() const {
  return training_auc_;
}
inline void RiskMinProgress::set_training_auc(double value) {
  set_has_training_auc();
  training_auc_ = value;
}

// optional .PS.AUCData training_auc_data = 9;
inline bool RiskMinProgress::has_training_auc_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RiskMinProgress::set_has_training_auc_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RiskMinProgress::clear_has_training_auc_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RiskMinProgress::clear_training_auc_data() {
  if (training_auc_data_ != NULL) training_auc_data_->::PS::AUCData::Clear();
  clear_has_training_auc_data();
}
inline const ::PS::AUCData& RiskMinProgress::training_auc_data() const {
  return training_auc_data_ != NULL ? *training_auc_data_ : *default_instance_->training_auc_data_;
}
inline ::PS::AUCData* RiskMinProgress::mutable_training_auc_data() {
  set_has_training_auc_data();
  if (training_auc_data_ == NULL) training_auc_data_ = new ::PS::AUCData;
  return training_auc_data_;
}
inline ::PS::AUCData* RiskMinProgress::release_training_auc_data() {
  clear_has_training_auc_data();
  ::PS::AUCData* temp = training_auc_data_;
  training_auc_data_ = NULL;
  return temp;
}
inline void RiskMinProgress::set_allocated_training_auc_data(::PS::AUCData* training_auc_data) {
  delete training_auc_data_;
  training_auc_data_ = training_auc_data;
  if (training_auc_data) {
    set_has_training_auc_data();
  } else {
    clear_has_training_auc_data();
  }
}

// optional double total_time = 10;
inline bool RiskMinProgress::has_total_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RiskMinProgress::set_has_total_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RiskMinProgress::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RiskMinProgress::clear_total_time() {
  total_time_ = 0;
  clear_has_total_time();
}
inline double RiskMinProgress::total_time() const {
  return total_time_;
}
inline void RiskMinProgress::set_total_time(double value) {
  set_has_total_time();
  total_time_ = value;
}

// repeated double busy_time = 11;
inline int RiskMinProgress::busy_time_size() const {
  return busy_time_.size();
}
inline void RiskMinProgress::clear_busy_time() {
  busy_time_.Clear();
}
inline double RiskMinProgress::busy_time(int index) const {
  return busy_time_.Get(index);
}
inline void RiskMinProgress::set_busy_time(int index, double value) {
  busy_time_.Set(index, value);
}
inline void RiskMinProgress::add_busy_time(double value) {
  busy_time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
RiskMinProgress::busy_time() const {
  return busy_time_;
}
inline ::google::protobuf::RepeatedField< double >*
RiskMinProgress::mutable_busy_time() {
  return &busy_time_;
}

// -------------------------------------------------------------------

// RiskMinCall

// required .PS.RiskMinCall.Command cmd = 1;
inline bool RiskMinCall::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RiskMinCall::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RiskMinCall::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RiskMinCall::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::PS::RiskMinCall_Command RiskMinCall::cmd() const {
  return static_cast< ::PS::RiskMinCall_Command >(cmd_);
}
inline void RiskMinCall::set_cmd(::PS::RiskMinCall_Command value) {
  assert(::PS::RiskMinCall_Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// optional .PS.PbRange key = 2;
inline bool RiskMinCall::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RiskMinCall::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RiskMinCall::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RiskMinCall::clear_key() {
  if (key_ != NULL) key_->::PS::PbRange::Clear();
  clear_has_key();
}
inline const ::PS::PbRange& RiskMinCall::key() const {
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::PS::PbRange* RiskMinCall::mutable_key() {
  set_has_key();
  if (key_ == NULL) key_ = new ::PS::PbRange;
  return key_;
}
inline ::PS::PbRange* RiskMinCall::release_key() {
  clear_has_key();
  ::PS::PbRange* temp = key_;
  key_ = NULL;
  return temp;
}
inline void RiskMinCall::set_allocated_key(::PS::PbRange* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
}

// optional int32 feature_group_id = 3;
inline bool RiskMinCall::has_feature_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RiskMinCall::set_has_feature_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RiskMinCall::clear_has_feature_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RiskMinCall::clear_feature_group_id() {
  feature_group_id_ = 0;
  clear_has_feature_group_id();
}
inline ::google::protobuf::int32 RiskMinCall::feature_group_id() const {
  return feature_group_id_;
}
inline void RiskMinCall::set_feature_group_id(::google::protobuf::int32 value) {
  set_has_feature_group_id();
  feature_group_id_ = value;
}

// optional double kkt_filter_threshold = 4;
inline bool RiskMinCall::has_kkt_filter_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RiskMinCall::set_has_kkt_filter_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RiskMinCall::clear_has_kkt_filter_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RiskMinCall::clear_kkt_filter_threshold() {
  kkt_filter_threshold_ = 0;
  clear_has_kkt_filter_threshold();
}
inline double RiskMinCall::kkt_filter_threshold() const {
  return kkt_filter_threshold_;
}
inline void RiskMinCall::set_kkt_filter_threshold(double value) {
  set_has_kkt_filter_threshold();
  kkt_filter_threshold_ = value;
}

// optional bool kkt_filter_reset = 5;
inline bool RiskMinCall::has_kkt_filter_reset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RiskMinCall::set_has_kkt_filter_reset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RiskMinCall::clear_has_kkt_filter_reset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RiskMinCall::clear_kkt_filter_reset() {
  kkt_filter_reset_ = false;
  clear_has_kkt_filter_reset();
}
inline bool RiskMinCall::kkt_filter_reset() const {
  return kkt_filter_reset_;
}
inline void RiskMinCall::set_kkt_filter_reset(bool value) {
  set_has_kkt_filter_reset();
  kkt_filter_reset_ = value;
}

// repeated .PS.PbRange reduce_range = 6;
inline int RiskMinCall::reduce_range_size() const {
  return reduce_range_.size();
}
inline void RiskMinCall::clear_reduce_range() {
  reduce_range_.Clear();
}
inline const ::PS::PbRange& RiskMinCall::reduce_range(int index) const {
  return reduce_range_.Get(index);
}
inline ::PS::PbRange* RiskMinCall::mutable_reduce_range(int index) {
  return reduce_range_.Mutable(index);
}
inline ::PS::PbRange* RiskMinCall::add_reduce_range() {
  return reduce_range_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PS::PbRange >&
RiskMinCall::reduce_range() const {
  return reduce_range_;
}
inline ::google::protobuf::RepeatedPtrField< ::PS::PbRange >*
RiskMinCall::mutable_reduce_range() {
  return &reduce_range_;
}

// optional string name = 7;
inline bool RiskMinCall::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RiskMinCall::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RiskMinCall::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RiskMinCall::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RiskMinCall::name() const {
  return *name_;
}
inline void RiskMinCall::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RiskMinCall::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RiskMinCall::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RiskMinCall::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RiskMinCall::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RiskMinCall::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AggGradLearnerArg

// optional double learning_rate = 1;
inline bool AggGradLearnerArg::has_learning_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AggGradLearnerArg::set_has_learning_rate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AggGradLearnerArg::clear_has_learning_rate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AggGradLearnerArg::clear_learning_rate() {
  learning_rate_ = 0;
  clear_has_learning_rate();
}
inline double AggGradLearnerArg::learning_rate() const {
  return learning_rate_;
}
inline void AggGradLearnerArg::set_learning_rate(double value) {
  set_has_learning_rate();
  learning_rate_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::LossConfig_Type>() {
  return ::PS::LossConfig_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::LearnerConfig_Type>() {
  return ::PS::LearnerConfig_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::RiskMinCall_Command>() {
  return ::PS::RiskMinCall_Command_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2frisk_5fminimization_2eproto__INCLUDED
